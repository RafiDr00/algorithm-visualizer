{"ast":null,"code":"var _jsxFileName = \"D:\\\\algorithm-visualizer\\\\src\\\\components\\\\ComplexityAnalyzer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n// Charts library removed for lighter build\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 2rem;\n  color: white;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c = Container;\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n  font-weight: 700;\n`;\n_c2 = Title;\nconst Controls = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = Controls;\nconst ControlGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  align-items: center;\n`;\n_c4 = ControlGroup;\nconst Label = styled.label`\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c5 = Label;\nconst Select = styled.select`\n  padding: 0.75rem 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  cursor: pointer;\n  \n  option {\n    background: #2a2a3e;\n    color: white;\n  }\n`;\n_c6 = Select;\nconst Input = styled.input`\n  padding: 0.75rem 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  width: 100px;\n  text-align: center;\n  \n  &::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n  }\n`;\n_c7 = Input;\nconst Button = styled.button`\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 14px;\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n_c8 = Button;\nconst ChartContainer = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  height: 400px;\n`;\n_c9 = ChartContainer;\nconst ChartTitle = styled.h3`\n  text-align: center;\n  margin-bottom: 1rem;\n  color: #667eea;\n`;\n_c0 = ChartTitle;\nconst ComparisonGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 2rem;\n`;\n_c1 = ComparisonGrid;\nconst ComparisonCard = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n`;\n_c10 = ComparisonCard;\nconst AlgorithmName = styled.h3`\n  color: #667eea;\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n_c11 = AlgorithmName;\nconst ComplexityInfo = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n  margin-bottom: 1rem;\n`;\n_c12 = ComplexityInfo;\nconst ComplexityItem = styled.div`\n  text-align: center;\n`;\n_c13 = ComplexityItem;\nconst ComplexityLabel = styled.div`\n  font-size: 0.9rem;\n  opacity: 0.8;\n  margin-bottom: 0.5rem;\n`;\n_c14 = ComplexityLabel;\nconst ComplexityValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: ${props => {\n  if (props.$complexity.includes('n²') || props.$complexity.includes('2^n')) return '#ff6b6b';\n  if (props.$complexity.includes('n log n')) return '#ffa726';\n  if (props.$complexity.includes('n')) return '#66bb6a';\n  return '#42a5f5';\n}};\n`;\n_c15 = ComplexityValue;\nconst PerformanceMetrics = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n  margin-top: 1rem;\n`;\n_c16 = PerformanceMetrics;\nconst MetricItem = styled.div`\n  text-align: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n`;\n_c17 = MetricItem;\nconst MetricLabel = styled.div`\n  font-size: 0.8rem;\n  opacity: 0.8;\n  margin-bottom: 0.5rem;\n`;\n_c18 = MetricLabel;\nconst MetricValue = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n`;\n_c19 = MetricValue;\nconst algorithms = {\n  // Sorting Algorithms\n  'bubble-sort': {\n    name: 'Bubble Sort',\n    timeComplexity: {\n      best: 'O(n)',\n      average: 'O(n²)',\n      worst: 'O(n²)'\n    },\n    spaceComplexity: 'O(1)',\n    category: 'sorting',\n    implementation: arr => {\n      const result = [...arr];\n      let comparisons = 0;\n      let swaps = 0;\n      const steps = [];\n      for (let i = 0; i < result.length - 1; i++) {\n        for (let j = 0; j < result.length - i - 1; j++) {\n          comparisons++;\n          if (result[j] > result[j + 1]) {\n            [result[j], result[j + 1]] = [result[j + 1], result[j]];\n            swaps++;\n          }\n        }\n      }\n      return {\n        comparisons,\n        swaps,\n        steps\n      };\n    }\n  },\n  'merge-sort': {\n    name: 'Merge Sort',\n    timeComplexity: {\n      best: 'O(n log n)',\n      average: 'O(n log n)',\n      worst: 'O(n log n)'\n    },\n    spaceComplexity: 'O(n)',\n    category: 'sorting',\n    implementation: arr => {\n      let comparisons = 0;\n      let merges = 0;\n      const mergeSort = array => {\n        if (array.length <= 1) return array;\n        const mid = Math.floor(array.length / 2);\n        const left = mergeSort(array.slice(0, mid));\n        const right = mergeSort(array.slice(mid));\n        return merge(left, right);\n      };\n      const merge = (left, right) => {\n        const result = [];\n        let i = 0,\n          j = 0;\n        while (i < left.length && j < right.length) {\n          comparisons++;\n          if (left[i] <= right[j]) {\n            result.push(left[i]);\n            i++;\n          } else {\n            result.push(right[j]);\n            j++;\n          }\n          merges++;\n        }\n        return result.concat(left.slice(i)).concat(right.slice(j));\n      };\n      mergeSort([...arr]);\n      return {\n        comparisons,\n        swaps: merges\n      };\n    }\n  },\n  'quick-sort': {\n    name: 'Quick Sort',\n    timeComplexity: {\n      best: 'O(n log n)',\n      average: 'O(n log n)',\n      worst: 'O(n²)'\n    },\n    spaceComplexity: 'O(log n)',\n    category: 'sorting',\n    implementation: arr => {\n      let comparisons = 0;\n      let swaps = 0;\n      const quickSort = (array, low = 0, high = array.length - 1) => {\n        if (low < high) {\n          const pi = partition(array, low, high);\n          quickSort(array, low, pi - 1);\n          quickSort(array, pi + 1, high);\n        }\n      };\n      const partition = (array, low, high) => {\n        const pivot = array[high];\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          comparisons++;\n          if (array[j] < pivot) {\n            i++;\n            [array[i], array[j]] = [array[j], array[i]];\n            swaps++;\n          }\n        }\n        [array[i + 1], array[high]] = [array[high], array[i + 1]];\n        swaps++;\n        return i + 1;\n      };\n      const result = [...arr];\n      quickSort(result);\n      return {\n        comparisons,\n        swaps\n      };\n    }\n  },\n  // Search Algorithms\n  'linear-search': {\n    name: 'Linear Search',\n    timeComplexity: {\n      best: 'O(1)',\n      average: 'O(n)',\n      worst: 'O(n)'\n    },\n    spaceComplexity: 'O(1)',\n    category: 'search',\n    implementation: (arr, target = arr[Math.floor(arr.length / 2)]) => {\n      let comparisons = 0;\n      for (let i = 0; i < arr.length; i++) {\n        comparisons++;\n        if (arr[i] === target) {\n          return {\n            comparisons,\n            found: true,\n            index: i\n          };\n        }\n      }\n      return {\n        comparisons,\n        found: false,\n        index: -1\n      };\n    }\n  },\n  'binary-search': {\n    name: 'Binary Search',\n    timeComplexity: {\n      best: 'O(1)',\n      average: 'O(log n)',\n      worst: 'O(log n)'\n    },\n    spaceComplexity: 'O(1)',\n    category: 'search',\n    implementation: (arr, target = arr[Math.floor(arr.length / 2)]) => {\n      const sortedArr = [...arr].sort((a, b) => a - b);\n      let comparisons = 0;\n      let left = 0;\n      let right = sortedArr.length - 1;\n      while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        comparisons++;\n        if (sortedArr[mid] === target) {\n          return {\n            comparisons,\n            found: true,\n            index: mid\n          };\n        } else if (sortedArr[mid] < target) {\n          left = mid + 1;\n        } else {\n          right = mid - 1;\n        }\n      }\n      return {\n        comparisons,\n        found: false,\n        index: -1\n      };\n    }\n  }\n};\nconst ComplexityAnalyzer = () => {\n  _s();\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState(['bubble-sort', 'merge-sort']);\n  const [inputSize, setInputSize] = useState(1000);\n  const [maxSize, setMaxSize] = useState(5000);\n  const [chartData, setChartData] = useState([]);\n  const [performanceData, setPerformanceData] = useState({});\n  const [isRunning, setIsRunning] = useState(false);\n  const generateRandomArray = size => {\n    return Array.from({\n      length: size\n    }, () => Math.floor(Math.random() * 1000));\n  };\n  const measurePerformance = (algorithm, array) => {\n    const startTime = performance.now();\n    const result = algorithms[algorithm].implementation(array);\n    const endTime = performance.now();\n    return {\n      ...result,\n      executionTime: endTime - startTime,\n      arraySize: array.length\n    };\n  };\n  const runComplexityAnalysis = async () => {\n    setIsRunning(true);\n    const data = [];\n    const perfData = {};\n    const sizes = [];\n    for (let size = 100; size <= maxSize; size += Math.max(100, Math.floor(maxSize / 20))) {\n      sizes.push(size);\n    }\n    for (const size of sizes) {\n      const array = generateRandomArray(size);\n      const dataPoint = {\n        size\n      };\n      for (const algorithmKey of selectedAlgorithms) {\n        if (algorithms[algorithmKey]) {\n          const result = measurePerformance(algorithmKey, array);\n          dataPoint[algorithmKey] = result.executionTime;\n          if (!perfData[algorithmKey]) {\n            perfData[algorithmKey] = [];\n          }\n          perfData[algorithmKey].push(result);\n        }\n      }\n      data.push(dataPoint);\n\n      // Update chart incrementally\n      setChartData([...data]);\n      await new Promise(resolve => setTimeout(resolve, 50));\n    }\n    setPerformanceData(perfData);\n    setIsRunning(false);\n  };\n  const runSingleTest = () => {\n    const array = generateRandomArray(inputSize);\n    const results = {};\n    selectedAlgorithms.forEach(algorithmKey => {\n      if (algorithms[algorithmKey]) {\n        results[algorithmKey] = measurePerformance(algorithmKey, array);\n      }\n    });\n    setPerformanceData(results);\n  };\n  const getComplexityColor = complexity => {\n    if (complexity.includes('n²') || complexity.includes('2^n')) return '#ff6b6b';\n    if (complexity.includes('n log n')) return '#ffa726';\n    if (complexity.includes('n')) return '#66bb6a';\n    return '#42a5f5';\n  };\n  const algorithmOptions = Object.keys(algorithms);\n  const colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Algorithm Complexity Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Algorithms to Compare\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          multiple: true,\n          value: selectedAlgorithms,\n          onChange: e => {\n            const values = Array.from(e.target.selectedOptions, option => option.value);\n            setSelectedAlgorithms(values.slice(0, 4)); // Limit to 4 algorithms\n          },\n          disabled: isRunning,\n          style: {\n            height: '120px'\n          },\n          children: algorithmOptions.map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: algorithms[key].name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Single Test Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          min: \"10\",\n          max: \"10000\",\n          value: inputSize,\n          onChange: e => setInputSize(parseInt(e.target.value)),\n          disabled: isRunning\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Max Size (Analysis)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          min: \"1000\",\n          max: \"20000\",\n          value: maxSize,\n          onChange: e => setMaxSize(parseInt(e.target.value)),\n          disabled: isRunning\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: runSingleTest,\n        disabled: isRunning || selectedAlgorithms.length === 0,\n        children: \"Run Single Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: runComplexityAnalysis,\n        disabled: isRunning || selectedAlgorithms.length === 0,\n        children: isRunning ? 'Analyzing...' : 'Run Complexity Analysis'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(ChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        children: \"Performance Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'white',\n          textAlign: 'center',\n          padding: '50px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Chart visualization would appear here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Data points collected: \", chartData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Algorithms tested: \", selectedAlgorithms.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ComparisonGrid, {\n      children: selectedAlgorithms.map((algorithmKey, index) => {\n        const algorithm = algorithms[algorithmKey];\n        const perfData = performanceData[algorithmKey];\n        if (!algorithm) return null;\n        return /*#__PURE__*/_jsxDEV(ComparisonCard, {\n          children: [/*#__PURE__*/_jsxDEV(AlgorithmName, {\n            children: algorithm.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ComplexityInfo, {\n            children: [/*#__PURE__*/_jsxDEV(ComplexityItem, {\n              children: [/*#__PURE__*/_jsxDEV(ComplexityLabel, {\n                children: \"Time Complexity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ComplexityValue, {\n                $complexity: algorithm.timeComplexity.average,\n                children: algorithm.timeComplexity.average\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ComplexityItem, {\n              children: [/*#__PURE__*/_jsxDEV(ComplexityLabel, {\n                children: \"Space Complexity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ComplexityValue, {\n                $complexity: algorithm.spaceComplexity,\n                children: algorithm.spaceComplexity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this), perfData && perfData.length > 0 && /*#__PURE__*/_jsxDEV(PerformanceMetrics, {\n            children: [/*#__PURE__*/_jsxDEV(MetricItem, {\n              children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n                children: \"Execution Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n                children: [perfData[perfData.length - 1].executionTime.toFixed(2), \"ms\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(MetricItem, {\n              children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n                children: \"Comparisons\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n                children: perfData[perfData.length - 1].comparisons || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(MetricItem, {\n              children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n                children: \"Array Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n                children: perfData[perfData.length - 1].arraySize\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 17\n          }, this)]\n        }, algorithmKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 5\n  }, this);\n};\n_s(ComplexityAnalyzer, \"o9QYpsC4RvQitBK1l5DW0i/ypQU=\");\n_c20 = ComplexityAnalyzer;\nexport default ComplexityAnalyzer;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"ControlGroup\");\n$RefreshReg$(_c5, \"Label\");\n$RefreshReg$(_c6, \"Select\");\n$RefreshReg$(_c7, \"Input\");\n$RefreshReg$(_c8, \"Button\");\n$RefreshReg$(_c9, \"ChartContainer\");\n$RefreshReg$(_c0, \"ChartTitle\");\n$RefreshReg$(_c1, \"ComparisonGrid\");\n$RefreshReg$(_c10, \"ComparisonCard\");\n$RefreshReg$(_c11, \"AlgorithmName\");\n$RefreshReg$(_c12, \"ComplexityInfo\");\n$RefreshReg$(_c13, \"ComplexityItem\");\n$RefreshReg$(_c14, \"ComplexityLabel\");\n$RefreshReg$(_c15, \"ComplexityValue\");\n$RefreshReg$(_c16, \"PerformanceMetrics\");\n$RefreshReg$(_c17, \"MetricItem\");\n$RefreshReg$(_c18, \"MetricLabel\");\n$RefreshReg$(_c19, \"MetricValue\");\n$RefreshReg$(_c20, \"ComplexityAnalyzer\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","Container","div","_c","Title","h1","_c2","Controls","_c3","ControlGroup","_c4","Label","label","_c5","Select","select","_c6","Input","input","_c7","Button","button","_c8","ChartContainer","_c9","ChartTitle","h3","_c0","ComparisonGrid","_c1","ComparisonCard","_c10","AlgorithmName","_c11","ComplexityInfo","_c12","ComplexityItem","_c13","ComplexityLabel","_c14","ComplexityValue","props","$complexity","includes","_c15","PerformanceMetrics","_c16","MetricItem","_c17","MetricLabel","_c18","MetricValue","_c19","algorithms","name","timeComplexity","best","average","worst","spaceComplexity","category","implementation","arr","result","comparisons","swaps","steps","i","length","j","merges","mergeSort","array","mid","Math","floor","left","slice","right","merge","push","concat","quickSort","low","high","pi","partition","pivot","target","found","index","sortedArr","sort","a","b","ComplexityAnalyzer","_s","selectedAlgorithms","setSelectedAlgorithms","inputSize","setInputSize","maxSize","setMaxSize","chartData","setChartData","performanceData","setPerformanceData","isRunning","setIsRunning","generateRandomArray","size","Array","from","random","measurePerformance","algorithm","startTime","performance","now","endTime","executionTime","arraySize","runComplexityAnalysis","data","perfData","sizes","max","dataPoint","algorithmKey","Promise","resolve","setTimeout","runSingleTest","results","forEach","getComplexityColor","complexity","algorithmOptions","Object","keys","colors","children","fileName","_jsxFileName","lineNumber","columnNumber","multiple","value","onChange","e","values","selectedOptions","option","disabled","style","height","map","key","type","min","parseInt","onClick","color","textAlign","padding","join","toFixed","_c20","$RefreshReg$"],"sources":["D:/algorithm-visualizer/src/components/ComplexityAnalyzer.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n// Charts library removed for lighter build\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  color: white;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ControlGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n  align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  cursor: pointer;\r\n  \r\n  option {\r\n    background: #2a2a3e;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  width: 100px;\r\n  text-align: center;\r\n  \r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.7);\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  font-size: 14px;\r\n  background: linear-gradient(45deg, #667eea, #764ba2);\r\n  color: white;\r\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n  \r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    transform: none;\r\n  }\r\n`;\r\n\r\nconst ChartContainer = styled.div`\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  height: 400px;\r\n`;\r\n\r\nconst ChartTitle = styled.h3`\r\n  text-align: center;\r\n  margin-bottom: 1rem;\r\n  color: #667eea;\r\n`;\r\n\r\nconst ComparisonGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 2rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst ComparisonCard = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n`;\r\n\r\nconst AlgorithmName = styled.h3`\r\n  color: #667eea;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst ComplexityInfo = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst ComplexityItem = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst ComplexityLabel = styled.div`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst ComplexityValue = styled.div`\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  color: ${props => {\r\n    if (props.$complexity.includes('n²') || props.$complexity.includes('2^n')) return '#ff6b6b';\r\n    if (props.$complexity.includes('n log n')) return '#ffa726';\r\n    if (props.$complexity.includes('n')) return '#66bb6a';\r\n    return '#42a5f5';\r\n  }};\r\n`;\r\n\r\nconst PerformanceMetrics = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst MetricItem = styled.div`\r\n  text-align: center;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst MetricLabel = styled.div`\r\n  font-size: 0.8rem;\r\n  opacity: 0.8;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst MetricValue = styled.div`\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst algorithms = {\r\n  // Sorting Algorithms\r\n  'bubble-sort': {\r\n    name: 'Bubble Sort',\r\n    timeComplexity: {\r\n      best: 'O(n)',\r\n      average: 'O(n²)',\r\n      worst: 'O(n²)'\r\n    },\r\n    spaceComplexity: 'O(1)',\r\n    category: 'sorting',\r\n    implementation: (arr) => {\r\n      const result = [...arr];\r\n      let comparisons = 0;\r\n      let swaps = 0;\r\n      const steps = [];\r\n      \r\n      for (let i = 0; i < result.length - 1; i++) {\r\n        for (let j = 0; j < result.length - i - 1; j++) {\r\n          comparisons++;\r\n          if (result[j] > result[j + 1]) {\r\n            [result[j], result[j + 1]] = [result[j + 1], result[j]];\r\n            swaps++;\r\n          }\r\n        }\r\n      }\r\n      \r\n      return { comparisons, swaps, steps };\r\n    }\r\n  },\r\n  'merge-sort': {\r\n    name: 'Merge Sort',\r\n    timeComplexity: {\r\n      best: 'O(n log n)',\r\n      average: 'O(n log n)',\r\n      worst: 'O(n log n)'\r\n    },\r\n    spaceComplexity: 'O(n)',\r\n    category: 'sorting',\r\n    implementation: (arr) => {\r\n      let comparisons = 0;\r\n      let merges = 0;\r\n      \r\n      const mergeSort = (array) => {\r\n        if (array.length <= 1) return array;\r\n        \r\n        const mid = Math.floor(array.length / 2);\r\n        const left = mergeSort(array.slice(0, mid));\r\n        const right = mergeSort(array.slice(mid));\r\n        \r\n        return merge(left, right);\r\n      };\r\n      \r\n      const merge = (left, right) => {\r\n        const result = [];\r\n        let i = 0, j = 0;\r\n        \r\n        while (i < left.length && j < right.length) {\r\n          comparisons++;\r\n          if (left[i] <= right[j]) {\r\n            result.push(left[i]);\r\n            i++;\r\n          } else {\r\n            result.push(right[j]);\r\n            j++;\r\n          }\r\n          merges++;\r\n        }\r\n        \r\n        return result.concat(left.slice(i)).concat(right.slice(j));\r\n      };\r\n      \r\n      mergeSort([...arr]);\r\n      return { comparisons, swaps: merges };\r\n    }\r\n  },\r\n  'quick-sort': {\r\n    name: 'Quick Sort',\r\n    timeComplexity: {\r\n      best: 'O(n log n)',\r\n      average: 'O(n log n)',\r\n      worst: 'O(n²)'\r\n    },\r\n    spaceComplexity: 'O(log n)',\r\n    category: 'sorting',\r\n    implementation: (arr) => {\r\n      let comparisons = 0;\r\n      let swaps = 0;\r\n      \r\n      const quickSort = (array, low = 0, high = array.length - 1) => {\r\n        if (low < high) {\r\n          const pi = partition(array, low, high);\r\n          quickSort(array, low, pi - 1);\r\n          quickSort(array, pi + 1, high);\r\n        }\r\n      };\r\n      \r\n      const partition = (array, low, high) => {\r\n        const pivot = array[high];\r\n        let i = low - 1;\r\n        \r\n        for (let j = low; j < high; j++) {\r\n          comparisons++;\r\n          if (array[j] < pivot) {\r\n            i++;\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            swaps++;\r\n          }\r\n        }\r\n        \r\n        [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n        swaps++;\r\n        return i + 1;\r\n      };\r\n      \r\n      const result = [...arr];\r\n      quickSort(result);\r\n      return { comparisons, swaps };\r\n    }\r\n  },\r\n  // Search Algorithms\r\n  'linear-search': {\r\n    name: 'Linear Search',\r\n    timeComplexity: {\r\n      best: 'O(1)',\r\n      average: 'O(n)',\r\n      worst: 'O(n)'\r\n    },\r\n    spaceComplexity: 'O(1)',\r\n    category: 'search',\r\n    implementation: (arr, target = arr[Math.floor(arr.length / 2)]) => {\r\n      let comparisons = 0;\r\n      \r\n      for (let i = 0; i < arr.length; i++) {\r\n        comparisons++;\r\n        if (arr[i] === target) {\r\n          return { comparisons, found: true, index: i };\r\n        }\r\n      }\r\n      \r\n      return { comparisons, found: false, index: -1 };\r\n    }\r\n  },\r\n  'binary-search': {\r\n    name: 'Binary Search',\r\n    timeComplexity: {\r\n      best: 'O(1)',\r\n      average: 'O(log n)',\r\n      worst: 'O(log n)'\r\n    },\r\n    spaceComplexity: 'O(1)',\r\n    category: 'search',\r\n    implementation: (arr, target = arr[Math.floor(arr.length / 2)]) => {\r\n      const sortedArr = [...arr].sort((a, b) => a - b);\r\n      let comparisons = 0;\r\n      let left = 0;\r\n      let right = sortedArr.length - 1;\r\n      \r\n      while (left <= right) {\r\n        const mid = Math.floor((left + right) / 2);\r\n        comparisons++;\r\n        \r\n        if (sortedArr[mid] === target) {\r\n          return { comparisons, found: true, index: mid };\r\n        } else if (sortedArr[mid] < target) {\r\n          left = mid + 1;\r\n        } else {\r\n          right = mid - 1;\r\n        }\r\n      }\r\n      \r\n      return { comparisons, found: false, index: -1 };\r\n    }\r\n  }\r\n};\r\n\r\nconst ComplexityAnalyzer = () => {\r\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState(['bubble-sort', 'merge-sort']);\r\n  const [inputSize, setInputSize] = useState(1000);\r\n  const [maxSize, setMaxSize] = useState(5000);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState({});\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  const generateRandomArray = (size) => {\r\n    return Array.from({ length: size }, () => Math.floor(Math.random() * 1000));\r\n  };\r\n\r\n  const measurePerformance = (algorithm, array) => {\r\n    const startTime = performance.now();\r\n    const result = algorithms[algorithm].implementation(array);\r\n    const endTime = performance.now();\r\n    \r\n    return {\r\n      ...result,\r\n      executionTime: endTime - startTime,\r\n      arraySize: array.length\r\n    };\r\n  };\r\n\r\n  const runComplexityAnalysis = async () => {\r\n    setIsRunning(true);\r\n    const data = [];\r\n    const perfData = {};\r\n    \r\n    const sizes = [];\r\n    for (let size = 100; size <= maxSize; size += Math.max(100, Math.floor(maxSize / 20))) {\r\n      sizes.push(size);\r\n    }\r\n    \r\n    for (const size of sizes) {\r\n      const array = generateRandomArray(size);\r\n      const dataPoint = { size };\r\n      \r\n      for (const algorithmKey of selectedAlgorithms) {\r\n        if (algorithms[algorithmKey]) {\r\n          const result = measurePerformance(algorithmKey, array);\r\n          dataPoint[algorithmKey] = result.executionTime;\r\n          \r\n          if (!perfData[algorithmKey]) {\r\n            perfData[algorithmKey] = [];\r\n          }\r\n          perfData[algorithmKey].push(result);\r\n        }\r\n      }\r\n      \r\n      data.push(dataPoint);\r\n      \r\n      // Update chart incrementally\r\n      setChartData([...data]);\r\n      await new Promise(resolve => setTimeout(resolve, 50));\r\n    }\r\n    \r\n    setPerformanceData(perfData);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const runSingleTest = () => {\r\n    const array = generateRandomArray(inputSize);\r\n    const results = {};\r\n    \r\n    selectedAlgorithms.forEach(algorithmKey => {\r\n      if (algorithms[algorithmKey]) {\r\n        results[algorithmKey] = measurePerformance(algorithmKey, array);\r\n      }\r\n    });\r\n    \r\n    setPerformanceData(results);\r\n  };\r\n\r\n  const getComplexityColor = (complexity) => {\r\n    if (complexity.includes('n²') || complexity.includes('2^n')) return '#ff6b6b';\r\n    if (complexity.includes('n log n')) return '#ffa726';\r\n    if (complexity.includes('n')) return '#66bb6a';\r\n    return '#42a5f5';\r\n  };\r\n\r\n  const algorithmOptions = Object.keys(algorithms);\r\n  const colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'];\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Algorithm Complexity Analyzer</Title>\r\n      \r\n      <Controls>\r\n        <ControlGroup>\r\n          <Label>Algorithms to Compare</Label>\r\n          <Select\r\n            multiple\r\n            value={selectedAlgorithms}\r\n            onChange={(e) => {\r\n              const values = Array.from(e.target.selectedOptions, option => option.value);\r\n              setSelectedAlgorithms(values.slice(0, 4)); // Limit to 4 algorithms\r\n            }}\r\n            disabled={isRunning}\r\n            style={{ height: '120px' }}\r\n          >\r\n            {algorithmOptions.map(key => (\r\n              <option key={key} value={key}>\r\n                {algorithms[key].name}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n        </ControlGroup>\r\n        \r\n        <ControlGroup>\r\n          <Label>Single Test Size</Label>\r\n          <Input\r\n            type=\"number\"\r\n            min=\"10\"\r\n            max=\"10000\"\r\n            value={inputSize}\r\n            onChange={(e) => setInputSize(parseInt(e.target.value))}\r\n            disabled={isRunning}\r\n          />\r\n        </ControlGroup>\r\n        \r\n        <ControlGroup>\r\n          <Label>Max Size (Analysis)</Label>\r\n          <Input\r\n            type=\"number\"\r\n            min=\"1000\"\r\n            max=\"20000\"\r\n            value={maxSize}\r\n            onChange={(e) => setMaxSize(parseInt(e.target.value))}\r\n            disabled={isRunning}\r\n          />\r\n        </ControlGroup>\r\n        \r\n        <Button onClick={runSingleTest} disabled={isRunning || selectedAlgorithms.length === 0}>\r\n          Run Single Test\r\n        </Button>\r\n        \r\n        <Button onClick={runComplexityAnalysis} disabled={isRunning || selectedAlgorithms.length === 0}>\r\n          {isRunning ? 'Analyzing...' : 'Run Complexity Analysis'}\r\n        </Button>\r\n      </Controls>\r\n\r\n      {chartData.length > 0 && (\r\n        <ChartContainer>\r\n          <ChartTitle>Performance Comparison</ChartTitle>\r\n          <div style={{color: 'white', textAlign: 'center', padding: '50px'}}>\r\n            <p>Chart visualization would appear here</p>\r\n            <p>Data points collected: {chartData.length}</p>\r\n            <p>Algorithms tested: {selectedAlgorithms.join(', ')}</p>\r\n          </div>\r\n        </ChartContainer>\r\n      )}\r\n\r\n      <ComparisonGrid>\r\n        {selectedAlgorithms.map((algorithmKey, index) => {\r\n          const algorithm = algorithms[algorithmKey];\r\n          const perfData = performanceData[algorithmKey];\r\n          \r\n          if (!algorithm) return null;\r\n          \r\n          return (\r\n            <ComparisonCard key={algorithmKey}>\r\n              <AlgorithmName>{algorithm.name}</AlgorithmName>\r\n              \r\n              <ComplexityInfo>\r\n                <ComplexityItem>\r\n                  <ComplexityLabel>Time Complexity</ComplexityLabel>\r\n                  <ComplexityValue $complexity={algorithm.timeComplexity.average}>\r\n                    {algorithm.timeComplexity.average}\r\n                  </ComplexityValue>\r\n                </ComplexityItem>\r\n                \r\n                <ComplexityItem>\r\n                  <ComplexityLabel>Space Complexity</ComplexityLabel>\r\n                  <ComplexityValue $complexity={algorithm.spaceComplexity}>\r\n                    {algorithm.spaceComplexity}\r\n                  </ComplexityValue>\r\n                </ComplexityItem>\r\n              </ComplexityInfo>\r\n              \r\n              {perfData && perfData.length > 0 && (\r\n                <PerformanceMetrics>\r\n                  <MetricItem>\r\n                    <MetricLabel>Execution Time</MetricLabel>\r\n                    <MetricValue>\r\n                      {perfData[perfData.length - 1].executionTime.toFixed(2)}ms\r\n                    </MetricValue>\r\n                  </MetricItem>\r\n                  \r\n                  <MetricItem>\r\n                    <MetricLabel>Comparisons</MetricLabel>\r\n                    <MetricValue>\r\n                      {perfData[perfData.length - 1].comparisons || 'N/A'}\r\n                    </MetricValue>\r\n                  </MetricItem>\r\n                  \r\n                  <MetricItem>\r\n                    <MetricLabel>Array Size</MetricLabel>\r\n                    <MetricValue>\r\n                      {perfData[perfData.length - 1].arraySize}\r\n                    </MetricValue>\r\n                  </MetricItem>\r\n                </PerformanceMetrics>\r\n              )}\r\n            </ComparisonCard>\r\n          );\r\n        })}\r\n      </ComparisonGrid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ComplexityAnalyzer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}