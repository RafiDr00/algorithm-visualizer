{"ast":null,"code":"var _jsxFileName = \"D:\\\\algorithm-visualizer\\\\src\\\\components\\\\PathfindingVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\n// Animation library removed for lighter build\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 2rem;\n  color: white;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c = Container;\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n  font-weight: 700;\n`;\n_c2 = Title;\nconst Controls = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = Controls;\nconst ControlGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  align-items: center;\n`;\n_c4 = ControlGroup;\nconst Label = styled.label`\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c5 = Label;\nconst Select = styled.select`\n  padding: 0.75rem 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  cursor: pointer;\n  \n  option {\n    background: #2a2a3e;\n    color: white;\n  }\n`;\n_c6 = Select;\nconst Button = styled.button`\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 14px;\n  \n  ${props => props.$primary ? `\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    color: white;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n  ` : props.$danger ? `\n    background: linear-gradient(45deg, #ff6b6b, #ee5a52);\n    color: white;\n    box-shadow: 0 4px 15px rgba(238, 90, 82, 0.3);\n  ` : `\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n  `}\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n_c7 = Button;\nconst GridContainer = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n`;\n_c8 = GridContainer;\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.$cols}, 20px);\n  grid-template-rows: repeat(${props => props.$rows}, 20px);\n  gap: 1px;\n  background: rgba(255, 255, 255, 0.1);\n  padding: 10px;\n  border-radius: 8px;\n`;\n_c9 = Grid;\nconst Cell = styled.div`\n  width: 20px;\n  height: 20px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  cursor: pointer;\n  position: relative;\n  \n  ${props => {\n  if (props.$isStart) return 'background: linear-gradient(45deg, #4ade80, #22c55e);';\n  if (props.$isEnd) return 'background: linear-gradient(45deg, #f87171, #ef4444);';\n  if (props.$isWall) return 'background: linear-gradient(45deg, #374151, #1f2937);';\n  if (props.$isPath) return 'background: linear-gradient(45deg, #fbbf24, #f59e0b);';\n  if (props.$isVisited) return 'background: linear-gradient(45deg, #8b5cf6, #7c3aed);';\n  if (props.$isExploring) return 'background: linear-gradient(45deg, #06b6d4, #0891b2);';\n  return 'background: rgba(255, 255, 255, 0.1);';\n}}\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n_c0 = Cell;\nconst InfoPanel = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 2rem;\n`;\n_c1 = InfoPanel;\nconst InfoCard = styled.div`\n  text-align: center;\n`;\n_c10 = InfoCard;\nconst InfoTitle = styled.h3`\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  color: #667eea;\n`;\n_c11 = InfoTitle;\nconst InfoValue = styled.div`\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n`;\n_c12 = InfoValue;\nconst InfoDescription = styled.div`\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c13 = InfoDescription;\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  justify-content: center;\n  margin-bottom: 2rem;\n`;\n_c14 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255, 255, 255, 0.1);\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  font-size: 0.9rem;\n`;\n_c15 = LegendItem;\nconst LegendColor = styled.div`\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  ${props => props.$color}\n`;\n_c16 = LegendColor;\nconst GRID_ROWS = 25;\nconst GRID_COLS = 50;\nconst algorithms = {\n  dijkstra: {\n    name: \"Dijkstra's Algorithm\",\n    description: \"Finds shortest path using weighted edges\",\n    guaranteesPath: true\n  },\n  astar: {\n    name: \"A* Algorithm\",\n    description: \"Uses heuristic to find optimal path faster\",\n    guaranteesPath: true\n  },\n  bfs: {\n    name: \"Breadth-First Search\",\n    description: \"Explores level by level, finds shortest unweighted path\",\n    guaranteesPath: true\n  },\n  dfs: {\n    name: \"Depth-First Search\",\n    description: \"Explores as far as possible before backtracking\",\n    guaranteesPath: false\n  }\n};\nconst PathfindingVisualizer = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [isRunning, setIsRunning] = useState(false);\n  const [start, setStart] = useState({\n    row: 12,\n    col: 10\n  });\n  const [end, setEnd] = useState({\n    row: 12,\n    col: 40\n  });\n  const [isDrawingWalls, setIsDrawingWalls] = useState(false);\n  const [mousePressed, setMousePressed] = useState(false);\n  const [mode, setMode] = useState('wall'); // wall, start, end\n  const [stats, setStats] = useState({\n    visited: 0,\n    pathLength: 0,\n    executionTime: 0\n  });\n  const initializeGrid = useCallback(() => {\n    const newGrid = [];\n    for (let row = 0; row < GRID_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < GRID_COLS; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === start.row && col === start.col,\n          isEnd: row === end.row && col === end.col,\n          isWall: false,\n          isVisited: false,\n          isPath: false,\n          isExploring: false,\n          distance: Infinity,\n          previousNode: null,\n          fScore: Infinity,\n          gScore: Infinity,\n          hScore: 0\n        });\n      }\n      newGrid.push(currentRow);\n    }\n    return newGrid;\n  }, [start, end]);\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [initializeGrid]);\n  const clearPath = () => {\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isVisited: false,\n      isPath: false,\n      isExploring: false,\n      distance: Infinity,\n      previousNode: null,\n      fScore: Infinity,\n      gScore: Infinity,\n      hScore: 0\n    })));\n    setGrid(newGrid);\n    setStats({\n      visited: 0,\n      pathLength: 0,\n      executionTime: 0\n    });\n  };\n  const clearWalls = () => {\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isWall: false\n    })));\n    setGrid(newGrid);\n  };\n  const resetGrid = () => {\n    setGrid(initializeGrid());\n    setStats({\n      visited: 0,\n      pathLength: 0,\n      executionTime: 0\n    });\n  };\n  const handleCellMouseDown = (row, col) => {\n    if (isRunning) return;\n    setMousePressed(true);\n    if (mode === 'start') {\n      setStart({\n        row,\n        col\n      });\n    } else if (mode === 'end') {\n      setEnd({\n        row,\n        col\n      });\n    } else if (mode === 'wall') {\n      toggleWall(row, col);\n    }\n  };\n  const handleCellMouseEnter = (row, col) => {\n    if (!mousePressed || isRunning) return;\n    if (mode === 'wall') {\n      toggleWall(row, col);\n    }\n  };\n  const handleMouseUp = () => {\n    setMousePressed(false);\n  };\n  const toggleWall = (row, col) => {\n    if (row === start.row && col === start.col || row === end.row && col === end.col) return;\n    const newGrid = [...grid];\n    newGrid[row][col] = {\n      ...newGrid[row][col],\n      isWall: !newGrid[row][col].isWall\n    };\n    setGrid(newGrid);\n  };\n  const getNeighbors = (node, grid) => {\n    const neighbors = [];\n    const {\n      row,\n      col\n    } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < GRID_ROWS - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < GRID_COLS - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isWall);\n  };\n  const heuristic = (nodeA, nodeB) => {\n    return Math.abs(nodeA.row - nodeB.row) + Math.abs(nodeA.col - nodeB.col);\n  };\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const animatePath = async path => {\n    for (let i = path.length - 1; i >= 0; i--) {\n      const node = path[i];\n      if (!node.isStart && !node.isEnd) {\n        const newGrid = [...grid];\n        newGrid[node.row][node.col] = {\n          ...newGrid[node.row][node.col],\n          isPath: true\n        };\n        setGrid(newGrid);\n        await sleep(50);\n      }\n    }\n  };\n  const dijkstra = async () => {\n    const startTime = Date.now();\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = getAllNodes(grid);\n    const startNode = grid[start.row][start.col];\n    const endNode = grid[end.row][end.col];\n    startNode.distance = 0;\n    while (unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode.distance === Infinity) break;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (!closestNode.isStart && !closestNode.isEnd) {\n        const newGrid = [...grid];\n        newGrid[closestNode.row][closestNode.col] = {\n          ...newGrid[closestNode.row][closestNode.col],\n          isExploring: true\n        };\n        setGrid(newGrid);\n        await sleep(20);\n      }\n      if (closestNode === endNode) {\n        const path = getPath(endNode);\n        await animatePath(path);\n        const endTime = Date.now();\n        setStats({\n          visited: visitedNodesInOrder.length,\n          pathLength: path.length,\n          executionTime: endTime - startTime\n        });\n        return;\n      }\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visitedNodesInOrder.length,\n      pathLength: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const astar = async () => {\n    const startTime = Date.now();\n    const openSet = [];\n    const closedSet = [];\n    const startNode = grid[start.row][start.col];\n    const endNode = grid[end.row][end.col];\n    startNode.gScore = 0;\n    startNode.fScore = heuristic(startNode, endNode);\n    openSet.push(startNode);\n    while (openSet.length > 0) {\n      openSet.sort((a, b) => a.fScore - b.fScore);\n      const current = openSet.shift();\n      closedSet.push(current);\n      if (!current.isStart && !current.isEnd) {\n        const newGrid = [...grid];\n        newGrid[current.row][current.col] = {\n          ...newGrid[current.row][current.col],\n          isExploring: true\n        };\n        setGrid(newGrid);\n        await sleep(20);\n      }\n      if (current === endNode) {\n        const path = getPath(endNode);\n        await animatePath(path);\n        const endTime = Date.now();\n        setStats({\n          visited: closedSet.length,\n          pathLength: path.length,\n          executionTime: endTime - startTime\n        });\n        return;\n      }\n      const neighbors = getNeighbors(current, grid);\n      for (const neighbor of neighbors) {\n        if (closedSet.includes(neighbor)) continue;\n        const tentativeGScore = current.gScore + 1;\n        if (!openSet.includes(neighbor)) {\n          openSet.push(neighbor);\n        } else if (tentativeGScore >= neighbor.gScore) {\n          continue;\n        }\n        neighbor.previousNode = current;\n        neighbor.gScore = tentativeGScore;\n        neighbor.fScore = neighbor.gScore + heuristic(neighbor, endNode);\n      }\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: closedSet.length,\n      pathLength: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const bfs = async () => {\n    const startTime = Date.now();\n    const queue = [];\n    const visited = [];\n    const startNode = grid[start.row][start.col];\n    const endNode = grid[end.row][end.col];\n    queue.push(startNode);\n    startNode.isVisited = true;\n    while (queue.length > 0) {\n      const current = queue.shift();\n      visited.push(current);\n      if (!current.isStart && !current.isEnd) {\n        const newGrid = [...grid];\n        newGrid[current.row][current.col] = {\n          ...newGrid[current.row][current.col],\n          isExploring: true\n        };\n        setGrid(newGrid);\n        await sleep(20);\n      }\n      if (current === endNode) {\n        const path = getPath(endNode);\n        await animatePath(path);\n        const endTime = Date.now();\n        setStats({\n          visited: visited.length,\n          pathLength: path.length,\n          executionTime: endTime - startTime\n        });\n        return;\n      }\n      const neighbors = getNeighbors(current, grid);\n      for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n          neighbor.isVisited = true;\n          neighbor.previousNode = current;\n          queue.push(neighbor);\n        }\n      }\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visited.length,\n      pathLength: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const dfs = async () => {\n    const startTime = Date.now();\n    const stack = [];\n    const visited = [];\n    const startNode = grid[start.row][start.col];\n    const endNode = grid[end.row][end.col];\n    stack.push(startNode);\n    while (stack.length > 0) {\n      const current = stack.pop();\n      if (current.isVisited) continue;\n      current.isVisited = true;\n      visited.push(current);\n      if (!current.isStart && !current.isEnd) {\n        const newGrid = [...grid];\n        newGrid[current.row][current.col] = {\n          ...newGrid[current.row][current.col],\n          isExploring: true\n        };\n        setGrid(newGrid);\n        await sleep(20);\n      }\n      if (current === endNode) {\n        const path = getPath(endNode);\n        await animatePath(path);\n        const endTime = Date.now();\n        setStats({\n          visited: visited.length,\n          pathLength: path.length,\n          executionTime: endTime - startTime\n        });\n        return;\n      }\n      const neighbors = getNeighbors(current, grid);\n      for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n          neighbor.previousNode = current;\n          stack.push(neighbor);\n        }\n      }\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visited.length,\n      pathLength: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const getAllNodes = grid => {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  };\n  const sortNodesByDistance = unvisitedNodes => {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  };\n  const updateUnvisitedNeighbors = (node, grid) => {\n    const unvisitedNeighbors = getNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  };\n  const getPath = finishNode => {\n    const path = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      path.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return path;\n  };\n  const startPathfinding = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    clearPath();\n    try {\n      switch (algorithm) {\n        case 'dijkstra':\n          await dijkstra();\n          break;\n        case 'astar':\n          await astar();\n          break;\n        case 'bfs':\n          await bfs();\n          break;\n        case 'dfs':\n          await dfs();\n          break;\n        default:\n          break;\n      }\n    } catch (error) {\n      console.error('Pathfinding interrupted:', error);\n    }\n    setIsRunning(false);\n  };\n  const legendItems = [{\n    color: 'background: linear-gradient(45deg, #4ade80, #22c55e);',\n    label: 'Start'\n  }, {\n    color: 'background: linear-gradient(45deg, #f87171, #ef4444);',\n    label: 'End'\n  }, {\n    color: 'background: linear-gradient(45deg, #374151, #1f2937);',\n    label: 'Wall'\n  }, {\n    color: 'background: linear-gradient(45deg, #06b6d4, #0891b2);',\n    label: 'Exploring'\n  }, {\n    color: 'background: linear-gradient(45deg, #8b5cf6, #7c3aed);',\n    label: 'Visited'\n  }, {\n    color: 'background: linear-gradient(45deg, #fbbf24, #f59e0b);',\n    label: 'Path'\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onMouseUp: handleMouseUp,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Pathfinding Algorithms Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: algorithm,\n          onChange: e => setAlgorithm(e.target.value),\n          disabled: isRunning,\n          children: Object.entries(algorithms).map(([key, algo]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: algo.name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: mode,\n          onChange: e => setMode(e.target.value),\n          disabled: isRunning,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wall\",\n            children: \"Draw Walls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"start\",\n            children: \"Move Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"Move End\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        $primary: true,\n        onClick: startPathfinding,\n        disabled: isRunning,\n        children: isRunning ? 'Finding Path...' : 'Find Path'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clearPath,\n        disabled: isRunning,\n        children: \"Clear Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clearWalls,\n        disabled: isRunning,\n        children: \"Clear Walls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        $danger: true,\n        onClick: resetGrid,\n        disabled: isRunning,\n        children: \"Reset Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      children: legendItems.map((item, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n          $color: item.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 13\n        }, this), item.label]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridContainer, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        $rows: GRID_ROWS,\n        $cols: GRID_COLS,\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          $isStart: cell.isStart,\n          $isEnd: cell.isEnd,\n          $isWall: cell.isWall,\n          $isPath: cell.isPath,\n          $isVisited: cell.isVisited,\n          $isExploring: cell.isExploring,\n          onMouseDown: () => handleCellMouseDown(rowIndex, colIndex),\n          onMouseEnter: () => handleCellMouseEnter(rowIndex, colIndex)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      children: [/*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          style: {\n            fontSize: '1.2rem'\n          },\n          children: algorithms[algorithm].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: algorithms[algorithm].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Nodes Visited\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: stats.visited\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Cells explored\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Path Length\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: stats.pathLength\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Steps to destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Execution Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: [stats.executionTime, \"ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Time to find path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Guarantees Shortest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: algorithms[algorithm].guaranteesPath ? 'Yes' : 'No'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Optimal path guarantee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n};\n_s(PathfindingVisualizer, \"mlBdaerFpp74QNrl0+OsuByPSbw=\");\n_c17 = PathfindingVisualizer;\nexport default PathfindingVisualizer;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"ControlGroup\");\n$RefreshReg$(_c5, \"Label\");\n$RefreshReg$(_c6, \"Select\");\n$RefreshReg$(_c7, \"Button\");\n$RefreshReg$(_c8, \"GridContainer\");\n$RefreshReg$(_c9, \"Grid\");\n$RefreshReg$(_c0, \"Cell\");\n$RefreshReg$(_c1, \"InfoPanel\");\n$RefreshReg$(_c10, \"InfoCard\");\n$RefreshReg$(_c11, \"InfoTitle\");\n$RefreshReg$(_c12, \"InfoValue\");\n$RefreshReg$(_c13, \"InfoDescription\");\n$RefreshReg$(_c14, \"Legend\");\n$RefreshReg$(_c15, \"LegendItem\");\n$RefreshReg$(_c16, \"LegendColor\");\n$RefreshReg$(_c17, \"PathfindingVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","jsxDEV","_jsxDEV","Container","div","_c","Title","h1","_c2","Controls","_c3","ControlGroup","_c4","Label","label","_c5","Select","select","_c6","Button","button","props","$primary","$danger","_c7","GridContainer","_c8","Grid","$cols","$rows","_c9","Cell","$isStart","$isEnd","$isWall","$isPath","$isVisited","$isExploring","_c0","InfoPanel","_c1","InfoCard","_c10","InfoTitle","h3","_c11","InfoValue","_c12","InfoDescription","_c13","Legend","_c14","LegendItem","_c15","LegendColor","$color","_c16","GRID_ROWS","GRID_COLS","algorithms","dijkstra","name","description","guaranteesPath","astar","bfs","dfs","PathfindingVisualizer","_s","grid","setGrid","algorithm","setAlgorithm","isRunning","setIsRunning","start","setStart","row","col","end","setEnd","isDrawingWalls","setIsDrawingWalls","mousePressed","setMousePressed","mode","setMode","stats","setStats","visited","pathLength","executionTime","initializeGrid","newGrid","currentRow","push","isStart","isEnd","isWall","isVisited","isPath","isExploring","distance","Infinity","previousNode","fScore","gScore","hScore","clearPath","map","node","clearWalls","resetGrid","handleCellMouseDown","toggleWall","handleCellMouseEnter","handleMouseUp","getNeighbors","neighbors","filter","neighbor","heuristic","nodeA","nodeB","Math","abs","sleep","ms","Promise","resolve","setTimeout","animatePath","path","i","length","startTime","Date","now","visitedNodesInOrder","unvisitedNodes","getAllNodes","startNode","endNode","sortNodesByDistance","closestNode","shift","getPath","endTime","updateUnvisitedNeighbors","openSet","closedSet","sort","a","b","current","includes","tentativeGScore","queue","stack","pop","nodes","unvisitedNeighbors","finishNode","currentNode","unshift","startPathfinding","error","console","legendItems","color","onMouseUp","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","Object","entries","key","algo","onClick","item","index","rowIndex","cell","colIndex","onMouseDown","onMouseEnter","style","fontSize","_c17","$RefreshReg$"],"sources":["D:/algorithm-visualizer/src/components/PathfindingVisualizer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n// Animation library removed for lighter build\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  color: white;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ControlGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n  align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  cursor: pointer;\r\n  \r\n  option {\r\n    background: #2a2a3e;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  font-size: 14px;\r\n  \r\n  ${props => props.$primary ? `\r\n    background: linear-gradient(45deg, #667eea, #764ba2);\r\n    color: white;\r\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n  ` : props.$danger ? `\r\n    background: linear-gradient(45deg, #ff6b6b, #ee5a52);\r\n    color: white;\r\n    box-shadow: 0 4px 15px rgba(238, 90, 82, 0.3);\r\n  ` : `\r\n    background: rgba(255, 255, 255, 0.2);\r\n    color: white;\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n  `}\r\n  \r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    transform: none;\r\n  }\r\n`;\r\n\r\nconst GridContainer = styled.div`\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  overflow: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.$cols}, 20px);\r\n  grid-template-rows: repeat(${props => props.$rows}, 20px);\r\n  gap: 1px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst Cell = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  cursor: pointer;\r\n  position: relative;\r\n  \r\n  ${props => {\r\n    if (props.$isStart) return 'background: linear-gradient(45deg, #4ade80, #22c55e);';\r\n    if (props.$isEnd) return 'background: linear-gradient(45deg, #f87171, #ef4444);';\r\n    if (props.$isWall) return 'background: linear-gradient(45deg, #374151, #1f2937);';\r\n    if (props.$isPath) return 'background: linear-gradient(45deg, #fbbf24, #f59e0b);';\r\n    if (props.$isVisited) return 'background: linear-gradient(45deg, #8b5cf6, #7c3aed);';\r\n    if (props.$isExploring) return 'background: linear-gradient(45deg, #06b6d4, #0891b2);';\r\n    return 'background: rgba(255, 255, 255, 0.1);';\r\n  }}\r\n  \r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\nconst InfoPanel = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 2rem;\r\n`;\r\n\r\nconst InfoCard = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst InfoTitle = styled.h3`\r\n  font-size: 1.2rem;\r\n  margin-bottom: 1rem;\r\n  color: #667eea;\r\n`;\r\n\r\nconst InfoValue = styled.div`\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst InfoDescription = styled.div`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst Legend = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst LegendItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 8px;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst LegendColor = styled.div`\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 2px;\r\n  ${props => props.$color}\r\n`;\r\n\r\nconst GRID_ROWS = 25;\r\nconst GRID_COLS = 50;\r\n\r\nconst algorithms = {\r\n  dijkstra: {\r\n    name: \"Dijkstra's Algorithm\",\r\n    description: \"Finds shortest path using weighted edges\",\r\n    guaranteesPath: true\r\n  },\r\n  astar: {\r\n    name: \"A* Algorithm\",\r\n    description: \"Uses heuristic to find optimal path faster\",\r\n    guaranteesPath: true\r\n  },\r\n  bfs: {\r\n    name: \"Breadth-First Search\",\r\n    description: \"Explores level by level, finds shortest unweighted path\",\r\n    guaranteesPath: true\r\n  },\r\n  dfs: {\r\n    name: \"Depth-First Search\",\r\n    description: \"Explores as far as possible before backtracking\",\r\n    guaranteesPath: false\r\n  }\r\n};\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [algorithm, setAlgorithm] = useState('dijkstra');\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [start, setStart] = useState({ row: 12, col: 10 });\r\n  const [end, setEnd] = useState({ row: 12, col: 40 });\r\n  const [isDrawingWalls, setIsDrawingWalls] = useState(false);\r\n  const [mousePressed, setMousePressed] = useState(false);\r\n  const [mode, setMode] = useState('wall'); // wall, start, end\r\n  const [stats, setStats] = useState({\r\n    visited: 0,\r\n    pathLength: 0,\r\n    executionTime: 0\r\n  });\r\n\r\n  const initializeGrid = useCallback(() => {\r\n    const newGrid = [];\r\n    for (let row = 0; row < GRID_ROWS; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < GRID_COLS; col++) {\r\n        currentRow.push({\r\n          row,\r\n          col,\r\n          isStart: row === start.row && col === start.col,\r\n          isEnd: row === end.row && col === end.col,\r\n          isWall: false,\r\n          isVisited: false,\r\n          isPath: false,\r\n          isExploring: false,\r\n          distance: Infinity,\r\n          previousNode: null,\r\n          fScore: Infinity,\r\n          gScore: Infinity,\r\n          hScore: 0\r\n        });\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    return newGrid;\r\n  }, [start, end]);\r\n\r\n  useEffect(() => {\r\n    setGrid(initializeGrid());\r\n  }, [initializeGrid]);\r\n\r\n  const clearPath = () => {\r\n    const newGrid = grid.map(row =>\r\n      row.map(node => ({\r\n        ...node,\r\n        isVisited: false,\r\n        isPath: false,\r\n        isExploring: false,\r\n        distance: Infinity,\r\n        previousNode: null,\r\n        fScore: Infinity,\r\n        gScore: Infinity,\r\n        hScore: 0\r\n      }))\r\n    );\r\n    setGrid(newGrid);\r\n    setStats({ visited: 0, pathLength: 0, executionTime: 0 });\r\n  };\r\n\r\n  const clearWalls = () => {\r\n    const newGrid = grid.map(row =>\r\n      row.map(node => ({\r\n        ...node,\r\n        isWall: false\r\n      }))\r\n    );\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const resetGrid = () => {\r\n    setGrid(initializeGrid());\r\n    setStats({ visited: 0, pathLength: 0, executionTime: 0 });\r\n  };\r\n\r\n  const handleCellMouseDown = (row, col) => {\r\n    if (isRunning) return;\r\n    \r\n    setMousePressed(true);\r\n    \r\n    if (mode === 'start') {\r\n      setStart({ row, col });\r\n    } else if (mode === 'end') {\r\n      setEnd({ row, col });\r\n    } else if (mode === 'wall') {\r\n      toggleWall(row, col);\r\n    }\r\n  };\r\n\r\n  const handleCellMouseEnter = (row, col) => {\r\n    if (!mousePressed || isRunning) return;\r\n    \r\n    if (mode === 'wall') {\r\n      toggleWall(row, col);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMousePressed(false);\r\n  };\r\n\r\n  const toggleWall = (row, col) => {\r\n    if ((row === start.row && col === start.col) || (row === end.row && col === end.col)) return;\r\n    \r\n    const newGrid = [...grid];\r\n    newGrid[row][col] = {\r\n      ...newGrid[row][col],\r\n      isWall: !newGrid[row][col].isWall\r\n    };\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const getNeighbors = (node, grid) => {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    \r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < GRID_ROWS - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < GRID_COLS - 1) neighbors.push(grid[row][col + 1]);\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isWall);\r\n  };\r\n\r\n  const heuristic = (nodeA, nodeB) => {\r\n    return Math.abs(nodeA.row - nodeB.row) + Math.abs(nodeA.col - nodeB.col);\r\n  };\r\n\r\n  const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n  const animatePath = async (path) => {\r\n    for (let i = path.length - 1; i >= 0; i--) {\r\n      const node = path[i];\r\n      if (!node.isStart && !node.isEnd) {\r\n        const newGrid = [...grid];\r\n        newGrid[node.row][node.col] = { ...newGrid[node.row][node.col], isPath: true };\r\n        setGrid(newGrid);\r\n        await sleep(50);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dijkstra = async () => {\r\n    const startTime = Date.now();\r\n    const visitedNodesInOrder = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    const startNode = grid[start.row][start.col];\r\n    const endNode = grid[end.row][end.col];\r\n    \r\n    startNode.distance = 0;\r\n    \r\n    while (unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      \r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) break;\r\n      \r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      \r\n      if (!closestNode.isStart && !closestNode.isEnd) {\r\n        const newGrid = [...grid];\r\n        newGrid[closestNode.row][closestNode.col] = { \r\n          ...newGrid[closestNode.row][closestNode.col], \r\n          isExploring: true \r\n        };\r\n        setGrid(newGrid);\r\n        await sleep(20);\r\n      }\r\n      \r\n      if (closestNode === endNode) {\r\n        const path = getPath(endNode);\r\n        await animatePath(path);\r\n        const endTime = Date.now();\r\n        setStats({\r\n          visited: visitedNodesInOrder.length,\r\n          pathLength: path.length,\r\n          executionTime: endTime - startTime\r\n        });\r\n        return;\r\n      }\r\n      \r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visitedNodesInOrder.length,\r\n      pathLength: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const astar = async () => {\r\n    const startTime = Date.now();\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[start.row][start.col];\r\n    const endNode = grid[end.row][end.col];\r\n    \r\n    startNode.gScore = 0;\r\n    startNode.fScore = heuristic(startNode, endNode);\r\n    openSet.push(startNode);\r\n    \r\n    while (openSet.length > 0) {\r\n      openSet.sort((a, b) => a.fScore - b.fScore);\r\n      const current = openSet.shift();\r\n      closedSet.push(current);\r\n      \r\n      if (!current.isStart && !current.isEnd) {\r\n        const newGrid = [...grid];\r\n        newGrid[current.row][current.col] = { \r\n          ...newGrid[current.row][current.col], \r\n          isExploring: true \r\n        };\r\n        setGrid(newGrid);\r\n        await sleep(20);\r\n      }\r\n      \r\n      if (current === endNode) {\r\n        const path = getPath(endNode);\r\n        await animatePath(path);\r\n        const endTime = Date.now();\r\n        setStats({\r\n          visited: closedSet.length,\r\n          pathLength: path.length,\r\n          executionTime: endTime - startTime\r\n        });\r\n        return;\r\n      }\r\n      \r\n      const neighbors = getNeighbors(current, grid);\r\n      \r\n      for (const neighbor of neighbors) {\r\n        if (closedSet.includes(neighbor)) continue;\r\n        \r\n        const tentativeGScore = current.gScore + 1;\r\n        \r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n        } else if (tentativeGScore >= neighbor.gScore) {\r\n          continue;\r\n        }\r\n        \r\n        neighbor.previousNode = current;\r\n        neighbor.gScore = tentativeGScore;\r\n        neighbor.fScore = neighbor.gScore + heuristic(neighbor, endNode);\r\n      }\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: closedSet.length,\r\n      pathLength: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const bfs = async () => {\r\n    const startTime = Date.now();\r\n    const queue = [];\r\n    const visited = [];\r\n    const startNode = grid[start.row][start.col];\r\n    const endNode = grid[end.row][end.col];\r\n    \r\n    queue.push(startNode);\r\n    startNode.isVisited = true;\r\n    \r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      visited.push(current);\r\n      \r\n      if (!current.isStart && !current.isEnd) {\r\n        const newGrid = [...grid];\r\n        newGrid[current.row][current.col] = { \r\n          ...newGrid[current.row][current.col], \r\n          isExploring: true \r\n        };\r\n        setGrid(newGrid);\r\n        await sleep(20);\r\n      }\r\n      \r\n      if (current === endNode) {\r\n        const path = getPath(endNode);\r\n        await animatePath(path);\r\n        const endTime = Date.now();\r\n        setStats({\r\n          visited: visited.length,\r\n          pathLength: path.length,\r\n          executionTime: endTime - startTime\r\n        });\r\n        return;\r\n      }\r\n      \r\n      const neighbors = getNeighbors(current, grid);\r\n      \r\n      for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n          neighbor.isVisited = true;\r\n          neighbor.previousNode = current;\r\n          queue.push(neighbor);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visited.length,\r\n      pathLength: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const dfs = async () => {\r\n    const startTime = Date.now();\r\n    const stack = [];\r\n    const visited = [];\r\n    const startNode = grid[start.row][start.col];\r\n    const endNode = grid[end.row][end.col];\r\n    \r\n    stack.push(startNode);\r\n    \r\n    while (stack.length > 0) {\r\n      const current = stack.pop();\r\n      \r\n      if (current.isVisited) continue;\r\n      current.isVisited = true;\r\n      visited.push(current);\r\n      \r\n      if (!current.isStart && !current.isEnd) {\r\n        const newGrid = [...grid];\r\n        newGrid[current.row][current.col] = { \r\n          ...newGrid[current.row][current.col], \r\n          isExploring: true \r\n        };\r\n        setGrid(newGrid);\r\n        await sleep(20);\r\n      }\r\n      \r\n      if (current === endNode) {\r\n        const path = getPath(endNode);\r\n        await animatePath(path);\r\n        const endTime = Date.now();\r\n        setStats({\r\n          visited: visited.length,\r\n          pathLength: path.length,\r\n          executionTime: endTime - startTime\r\n        });\r\n        return;\r\n      }\r\n      \r\n      const neighbors = getNeighbors(current, grid);\r\n      \r\n      for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n          neighbor.previousNode = current;\r\n          stack.push(neighbor);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visited.length,\r\n      pathLength: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const getAllNodes = (grid) => {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  };\r\n\r\n  const sortNodesByDistance = (unvisitedNodes) => {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  };\r\n\r\n  const updateUnvisitedNeighbors = (node, grid) => {\r\n    const unvisitedNeighbors = getNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  };\r\n\r\n  const getPath = (finishNode) => {\r\n    const path = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      path.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return path;\r\n  };\r\n\r\n  const startPathfinding = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    clearPath();\r\n    \r\n    try {\r\n      switch (algorithm) {\r\n        case 'dijkstra':\r\n          await dijkstra();\r\n          break;\r\n        case 'astar':\r\n          await astar();\r\n          break;\r\n        case 'bfs':\r\n          await bfs();\r\n          break;\r\n        case 'dfs':\r\n          await dfs();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('Pathfinding interrupted:', error);\r\n    }\r\n    \r\n    setIsRunning(false);\r\n  };\r\n\r\n  const legendItems = [\r\n    { color: 'background: linear-gradient(45deg, #4ade80, #22c55e);', label: 'Start' },\r\n    { color: 'background: linear-gradient(45deg, #f87171, #ef4444);', label: 'End' },\r\n    { color: 'background: linear-gradient(45deg, #374151, #1f2937);', label: 'Wall' },\r\n    { color: 'background: linear-gradient(45deg, #06b6d4, #0891b2);', label: 'Exploring' },\r\n    { color: 'background: linear-gradient(45deg, #8b5cf6, #7c3aed);', label: 'Visited' },\r\n    { color: 'background: linear-gradient(45deg, #fbbf24, #f59e0b);', label: 'Path' }\r\n  ];\r\n\r\n  return (\r\n    <Container onMouseUp={handleMouseUp}>\r\n      <Title>Pathfinding Algorithms Visualizer</Title>\r\n      \r\n      <Controls>\r\n        <ControlGroup>\r\n          <Label>Algorithm</Label>\r\n          <Select\r\n            value={algorithm}\r\n            onChange={(e) => setAlgorithm(e.target.value)}\r\n            disabled={isRunning}\r\n          >\r\n            {Object.entries(algorithms).map(([key, algo]) => (\r\n              <option key={key} value={key}>{algo.name}</option>\r\n            ))}\r\n          </Select>\r\n        </ControlGroup>\r\n        \r\n        <ControlGroup>\r\n          <Label>Mode</Label>\r\n          <Select\r\n            value={mode}\r\n            onChange={(e) => setMode(e.target.value)}\r\n            disabled={isRunning}\r\n          >\r\n            <option value=\"wall\">Draw Walls</option>\r\n            <option value=\"start\">Move Start</option>\r\n            <option value=\"end\">Move End</option>\r\n          </Select>\r\n        </ControlGroup>\r\n        \r\n        <Button $primary onClick={startPathfinding} disabled={isRunning}>\r\n          {isRunning ? 'Finding Path...' : 'Find Path'}\r\n        </Button>\r\n        \r\n        <Button onClick={clearPath} disabled={isRunning}>\r\n          Clear Path\r\n        </Button>\r\n        \r\n        <Button onClick={clearWalls} disabled={isRunning}>\r\n          Clear Walls\r\n        </Button>\r\n        \r\n        <Button $danger onClick={resetGrid} disabled={isRunning}>\r\n          Reset Grid\r\n        </Button>\r\n      </Controls>\r\n      \r\n      <Legend>\r\n        {legendItems.map((item, index) => (\r\n          <LegendItem key={index}>\r\n            <LegendColor $color={item.color} />\r\n            {item.label}\r\n          </LegendItem>\r\n        ))}\r\n      </Legend>\r\n      \r\n      <GridContainer>\r\n        <Grid $rows={GRID_ROWS} $cols={GRID_COLS}>\r\n          {grid.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) => (\r\n              <Cell\r\n                key={`${rowIndex}-${colIndex}`}\r\n                $isStart={cell.isStart}\r\n                $isEnd={cell.isEnd}\r\n                $isWall={cell.isWall}\r\n                $isPath={cell.isPath}\r\n                $isVisited={cell.isVisited}\r\n                $isExploring={cell.isExploring}\r\n                onMouseDown={() => handleCellMouseDown(rowIndex, colIndex)}\r\n                onMouseEnter={() => handleCellMouseEnter(rowIndex, colIndex)}\r\n\r\n              />\r\n            ))\r\n          )}\r\n        </Grid>\r\n      </GridContainer>\r\n      \r\n      <InfoPanel>\r\n        <InfoCard>\r\n          <InfoTitle>Algorithm</InfoTitle>\r\n          <InfoValue style={{ fontSize: '1.2rem' }}>{algorithms[algorithm].name}</InfoValue>\r\n          <InfoDescription>{algorithms[algorithm].description}</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Nodes Visited</InfoTitle>\r\n          <InfoValue>{stats.visited}</InfoValue>\r\n          <InfoDescription>Cells explored</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Path Length</InfoTitle>\r\n          <InfoValue>{stats.pathLength}</InfoValue>\r\n          <InfoDescription>Steps to destination</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Execution Time</InfoTitle>\r\n          <InfoValue>{stats.executionTime}ms</InfoValue>\r\n          <InfoDescription>Time to find path</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Guarantees Shortest</InfoTitle>\r\n          <InfoValue>{algorithms[algorithm].guaranteesPath ? 'Yes' : 'No'}</InfoValue>\r\n          <InfoDescription>Optimal path guarantee</InfoDescription>\r\n        </InfoCard>\r\n      </InfoPanel>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}