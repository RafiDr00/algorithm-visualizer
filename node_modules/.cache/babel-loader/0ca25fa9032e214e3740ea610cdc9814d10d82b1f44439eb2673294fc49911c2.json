{"ast":null,"code":"var _jsxFileName = \"D:\\\\algorithm-visualizer\\\\src\\\\components\\\\GraphVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\n// Animation library removed for lighter build\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 2rem;\n  color: white;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c = Container;\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n  font-weight: 700;\n`;\n_c2 = Title;\nconst Controls = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n`;\nconst ControlGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  align-items: center;\n`;\n_c3 = ControlGroup;\nconst Label = styled.label`\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c4 = Label;\nconst Select = styled.select`\n  padding: 0.75rem 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  cursor: pointer;\n  \n  option {\n    background: #2a2a3e;\n    color: white;\n  }\n`;\n_c5 = Select;\nconst Input = styled.input`\n  padding: 0.75rem 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  width: 100px;\n  text-align: center;\n  \n  &::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n  }\n`;\n_c6 = Input;\nconst Button = styled.button`\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 14px;\n  \n  ${props => props.$primary ? `\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    color: white;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n  ` : `\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n  `}\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n_c7 = Button;\nconst GraphContainer = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  min-height: 500px;\n  position: relative;\n  overflow: hidden;\n`;\n_c8 = GraphContainer;\nconst SVG = styled.svg`\n  width: 100%;\n  height: 500px;\n  background: transparent;\n`;\n_c9 = SVG;\nconst Node = styled.circle`\n  cursor: pointer;\n  stroke: rgba(255, 255, 255, 0.3);\n  stroke-width: 2;\n  \n  ${props => {\n  if (props.$isStart) return 'fill: #4ade80;';\n  if (props.$isVisited) return 'fill: #8b5cf6;';\n  if (props.$isCurrent) return 'fill: #f59e0b;';\n  if (props.$isInMST) return 'fill: #22c55e;';\n  return 'fill: #667eea;';\n}}\n`;\n_c0 = Node;\nconst Edge = styled.line`\n  stroke: rgba(255, 255, 255, 0.4);\n  stroke-width: 2;\n  \n  ${props => {\n  if (props.$isInMST) return 'stroke: #22c55e; stroke-width: 3;';\n  if (props.$isExploring) return 'stroke: #f59e0b; stroke-width: 3;';\n  return '';\n}}\n`;\n_c1 = Edge;\nconst EdgeWeight = styled.text`\n  fill: white;\n  font-size: 12px;\n  text-anchor: middle;\n  alignment-baseline: middle;\n  font-weight: 500;\n`;\n_c10 = EdgeWeight;\nconst NodeLabel = styled.text`\n  fill: white;\n  font-size: 14px;\n  text-anchor: middle;\n  alignment-baseline: middle;\n  font-weight: 600;\n  pointer-events: none;\n`;\n_c11 = NodeLabel;\nconst InfoPanel = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 2rem;\n`;\n_c12 = InfoPanel;\nconst InfoCard = styled.div`\n  text-align: center;\n`;\n_c13 = InfoCard;\nconst InfoTitle = styled.h3`\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  color: #667eea;\n`;\n_c14 = InfoTitle;\nconst InfoValue = styled.div`\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n`;\n_c15 = InfoValue;\nconst InfoDescription = styled.div`\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c16 = InfoDescription;\nconst InputSection = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n`;\n_c17 = InputSection;\nconst InputGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n_c18 = InputGrid;\nconst InputGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n_c19 = InputGroup;\nconst InputTitle = styled.h3`\n  color: #667eea;\n  margin-bottom: 1rem;\n`;\n_c20 = InputTitle;\nconst TextArea = styled.textarea`\n  padding: 1rem;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 14px;\n  backdrop-filter: blur(10px);\n  resize: vertical;\n  min-height: 120px;\n  font-family: 'Courier New', monospace;\n  \n  &::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n  }\n`;\n_c21 = TextArea;\nconst algorithms = {\n  dfs: {\n    name: 'Depth-First Search',\n    description: 'Traverses as far as possible before backtracking',\n    type: 'traversal'\n  },\n  bfs: {\n    name: 'Breadth-First Search',\n    description: 'Visits all neighbors before going to next level',\n    type: 'traversal'\n  },\n  kruskal: {\n    name: \"Kruskal's MST\",\n    description: 'Finds minimum spanning tree using edge sorting',\n    type: 'mst'\n  },\n  prim: {\n    name: \"Prim's MST\",\n    description: 'Grows MST by adding minimum weight edges',\n    type: 'mst'\n  },\n  topological: {\n    name: 'Topological Sort',\n    description: 'Orders vertices in directed acyclic graph',\n    type: 'sort'\n  }\n};\nconst GraphVisualizer = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [algorithm, setAlgorithm] = useState('dfs');\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [visitedNodes, setVisitedNodes] = useState(new Set());\n  const [exploringEdges, setExploringEdges] = useState(new Set());\n  const [mstEdges, setMstEdges] = useState(new Set());\n  const [startNode, setStartNode] = useState(0);\n  const [graphType, setGraphType] = useState('undirected');\n  const [nodesInput, setNodesInput] = useState('A,B,C,D,E');\n  const [edgesInput, setEdgesInput] = useState('A-B-5,B-C-3,C-D-7,D-E-2,E-A-4,B-D-6');\n  const [stats, setStats] = useState({\n    visited: 0,\n    totalWeight: 0,\n    executionTime: 0\n  });\n  const parseGraph = useCallback(() => {\n    try {\n      // Parse nodes\n      const nodeNames = nodesInput.split(',').map(n => n.trim()).filter(n => n);\n      const newNodes = nodeNames.map((name, index) => ({\n        id: index,\n        name,\n        x: 300 + 200 * Math.cos(2 * Math.PI * index / nodeNames.length),\n        y: 250 + 150 * Math.sin(2 * Math.PI * index / nodeNames.length)\n      }));\n\n      // Parse edges\n      const edgeStrings = edgesInput.split(',').map(e => e.trim()).filter(e => e);\n      const newEdges = [];\n      edgeStrings.forEach(edgeStr => {\n        const parts = edgeStr.split('-');\n        if (parts.length >= 2) {\n          const from = nodeNames.indexOf(parts[0].trim());\n          const to = nodeNames.indexOf(parts[1].trim());\n          const weight = parts.length > 2 ? parseInt(parts[2]) || 1 : 1;\n          if (from !== -1 && to !== -1) {\n            newEdges.push({\n              id: `${from}-${to}`,\n              from,\n              to,\n              weight\n            });\n          }\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      resetVisualization();\n    } catch (error) {\n      console.error('Error parsing graph:', error);\n    }\n  }, [nodesInput, edgesInput]);\n  useEffect(() => {\n    parseGraph();\n  }, [parseGraph]);\n  const resetVisualization = () => {\n    setCurrentNode(null);\n    setVisitedNodes(new Set());\n    setExploringEdges(new Set());\n    setMstEdges(new Set());\n    setStats({\n      visited: 0,\n      totalWeight: 0,\n      executionTime: 0\n    });\n  };\n  const generateRandomGraph = () => {\n    const nodeCount = 6;\n    const nodeNames = Array.from({\n      length: nodeCount\n    }, (_, i) => String.fromCharCode(65 + i));\n    const edgeList = [];\n\n    // Generate random edges\n    for (let i = 0; i < nodeCount; i++) {\n      for (let j = i + 1; j < nodeCount; j++) {\n        if (Math.random() > 0.4) {\n          // 60% chance of edge\n          const weight = Math.floor(Math.random() * 10) + 1;\n          edgeList.push(`${nodeNames[i]}-${nodeNames[j]}-${weight}`);\n        }\n      }\n    }\n    setNodesInput(nodeNames.join(','));\n    setEdgesInput(edgeList.join(','));\n  };\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const dfs = async () => {\n    const startTime = Date.now();\n    const visited = new Set();\n    const stack = [startNode];\n    let visitedCount = 0;\n    while (stack.length > 0) {\n      const currentId = stack.pop();\n      if (visited.has(currentId)) continue;\n      visited.add(currentId);\n      visitedCount++;\n      setCurrentNode(currentId);\n      setVisitedNodes(new Set(visited));\n      await sleep(800);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.from === currentId || edge.to === currentId).map(edge => edge.from === currentId ? edge.to : edge.from).filter(neighbor => !visited.has(neighbor));\n\n      // Add neighbors to stack in reverse order for consistent traversal\n      neighbors.reverse().forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          stack.push(neighbor);\n        }\n      });\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visitedCount,\n      totalWeight: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const bfs = async () => {\n    const startTime = Date.now();\n    const visited = new Set();\n    const queue = [startNode];\n    let visitedCount = 0;\n    visited.add(startNode);\n    while (queue.length > 0) {\n      const currentId = queue.shift();\n      visitedCount++;\n      setCurrentNode(currentId);\n      setVisitedNodes(new Set(visited));\n      await sleep(800);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.from === currentId || edge.to === currentId).map(edge => edge.from === currentId ? edge.to : edge.from).filter(neighbor => !visited.has(neighbor));\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visitedCount,\n      totalWeight: 0,\n      executionTime: endTime - startTime\n    });\n  };\n  const kruskal = async () => {\n    const startTime = Date.now();\n    const sortedEdges = [...edges].sort((a, b) => a.weight - b.weight);\n    const parent = {};\n    const rank = {};\n    const mst = new Set();\n    let totalWeight = 0;\n\n    // Initialize union-find\n    nodes.forEach(node => {\n      parent[node.id] = node.id;\n      rank[node.id] = 0;\n    });\n    const find = x => {\n      if (parent[x] !== x) {\n        parent[x] = find(parent[x]);\n      }\n      return parent[x];\n    };\n    const union = (x, y) => {\n      const rootX = find(x);\n      const rootY = find(y);\n      if (rootX !== rootY) {\n        if (rank[rootX] < rank[rootY]) {\n          parent[rootX] = rootY;\n        } else if (rank[rootX] > rank[rootY]) {\n          parent[rootY] = rootX;\n        } else {\n          parent[rootY] = rootX;\n          rank[rootX]++;\n        }\n        return true;\n      }\n      return false;\n    };\n    for (const edge of sortedEdges) {\n      setExploringEdges(new Set([edge.id]));\n      await sleep(1000);\n      if (union(edge.from, edge.to)) {\n        mst.add(edge.id);\n        totalWeight += edge.weight;\n        setMstEdges(new Set(mst));\n        await sleep(500);\n      }\n      setExploringEdges(new Set());\n      if (mst.size === nodes.length - 1) break;\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: nodes.length,\n      totalWeight,\n      executionTime: endTime - startTime\n    });\n  };\n  const prim = async () => {\n    const startTime = Date.now();\n    const visited = new Set([startNode]);\n    const mst = new Set();\n    let totalWeight = 0;\n    while (visited.size < nodes.length) {\n      let minEdge = null;\n      let minWeight = Infinity;\n\n      // Find minimum weight edge from visited to unvisited nodes\n      for (const edge of edges) {\n        const fromVisited = visited.has(edge.from);\n        const toVisited = visited.has(edge.to);\n        if (fromVisited !== toVisited && edge.weight < minWeight) {\n          minEdge = edge;\n          minWeight = edge.weight;\n        }\n      }\n      if (minEdge) {\n        setExploringEdges(new Set([minEdge.id]));\n        await sleep(1000);\n        mst.add(minEdge.id);\n        totalWeight += minEdge.weight;\n        visited.add(minEdge.from);\n        visited.add(minEdge.to);\n        setVisitedNodes(new Set(visited));\n        setMstEdges(new Set(mst));\n        setExploringEdges(new Set());\n        await sleep(500);\n      } else {\n        break;\n      }\n    }\n    const endTime = Date.now();\n    setStats({\n      visited: visited.size,\n      totalWeight,\n      executionTime: endTime - startTime\n    });\n  };\n  const startVisualization = async () => {\n    if (isRunning || nodes.length === 0) return;\n    setIsRunning(true);\n    resetVisualization();\n    try {\n      switch (algorithm) {\n        case 'dfs':\n          await dfs();\n          break;\n        case 'bfs':\n          await bfs();\n          break;\n        case 'kruskal':\n          await kruskal();\n          break;\n        case 'prim':\n          await prim();\n          break;\n        default:\n          break;\n      }\n    } catch (error) {\n      console.error('Visualization interrupted:', error);\n    }\n    setIsRunning(false);\n  };\n  const getEdgePosition = edge => {\n    const fromNode = nodes.find(n => n.id === edge.from);\n    const toNode = nodes.find(n => n.id === edge.to);\n    if (!fromNode || !toNode) return null;\n    return {\n      x1: fromNode.x,\n      y1: fromNode.y,\n      x2: toNode.x,\n      y2: toNode.y,\n      midX: (fromNode.x + toNode.x) / 2,\n      midY: (fromNode.y + toNode.y) / 2\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Graph Algorithms Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n      children: /*#__PURE__*/_jsxDEV(InputGrid, {\n        children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(InputTitle, {\n            children: \"Graph Definition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Label, {\n            children: \"Nodes (comma-separated)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            value: nodesInput,\n            onChange: e => setNodesInput(e.target.value),\n            placeholder: \"A,B,C,D,E\",\n            disabled: isRunning\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Label, {\n            children: \"Edges (format: A-B-weight)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            value: edgesInput,\n            onChange: e => setEdgesInput(e.target.value),\n            placeholder: \"A-B-5,B-C-3,C-D-7\",\n            disabled: isRunning\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: generateRandomGraph,\n            disabled: isRunning,\n            children: \"Generate Random Graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(InputTitle, {\n            children: \"Algorithm Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              children: \"Algorithm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: algorithm,\n              onChange: e => setAlgorithm(e.target.value),\n              disabled: isRunning,\n              children: Object.entries(algorithms).map(([key, algo]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: key,\n                children: algo.name\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              children: \"Start Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: startNode,\n              onChange: e => setStartNode(parseInt(e.target.value)),\n              disabled: isRunning,\n              children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: node.id,\n                children: node.name\n              }, node.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            $primary: true,\n            onClick: startVisualization,\n            disabled: isRunning || nodes.length === 0,\n            children: isRunning ? 'Running...' : 'Start Visualization'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: resetVisualization,\n            disabled: isRunning,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphContainer, {\n      children: /*#__PURE__*/_jsxDEV(SVG, {\n        children: [edges.map(edge => {\n          const pos = getEdgePosition(edge);\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(Edge, {\n              x1: pos.x1,\n              y1: pos.y1,\n              x2: pos.x2,\n              y2: pos.y2,\n              $isInMST: mstEdges.has(edge.id),\n              $isExploring: exploringEdges.has(edge.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(EdgeWeight, {\n              x: pos.midX,\n              y: pos.midY - 5,\n              children: edge.weight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this)]\n          }, edge.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(Node, {\n            cx: node.x,\n            cy: node.y,\n            r: 20,\n            $isStart: node.id === startNode,\n            $isCurrent: currentNode === node.id,\n            $isVisited: visitedNodes.has(node.id),\n            $isInMST: algorithms[algorithm].type === 'mst'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(NodeLabel, {\n            x: node.x,\n            y: node.y,\n            children: node.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this)]\n        }, node.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      children: [/*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          style: {\n            fontSize: '1.2rem'\n          },\n          children: algorithms[algorithm].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: algorithms[algorithm].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Nodes Processed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: stats.visited\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Vertices visited\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Total Weight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: stats.totalWeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"MST total weight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Execution Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: [stats.executionTime, \"ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Algorithm runtime\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoTitle, {\n          children: \"Graph Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: [nodes.length, \"V, \", edges.length, \"E\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoDescription, {\n          children: \"Vertices and edges\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 599,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualizer, \"oqWpVGbSqkOsW8aQLenmX0N7BHI=\");\n_c22 = GraphVisualizer;\nexport default GraphVisualizer;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"ControlGroup\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"Select\");\n$RefreshReg$(_c6, \"Input\");\n$RefreshReg$(_c7, \"Button\");\n$RefreshReg$(_c8, \"GraphContainer\");\n$RefreshReg$(_c9, \"SVG\");\n$RefreshReg$(_c0, \"Node\");\n$RefreshReg$(_c1, \"Edge\");\n$RefreshReg$(_c10, \"EdgeWeight\");\n$RefreshReg$(_c11, \"NodeLabel\");\n$RefreshReg$(_c12, \"InfoPanel\");\n$RefreshReg$(_c13, \"InfoCard\");\n$RefreshReg$(_c14, \"InfoTitle\");\n$RefreshReg$(_c15, \"InfoValue\");\n$RefreshReg$(_c16, \"InfoDescription\");\n$RefreshReg$(_c17, \"InputSection\");\n$RefreshReg$(_c18, \"InputGrid\");\n$RefreshReg$(_c19, \"InputGroup\");\n$RefreshReg$(_c20, \"InputTitle\");\n$RefreshReg$(_c21, \"TextArea\");\n$RefreshReg$(_c22, \"GraphVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","jsxDEV","_jsxDEV","Container","div","_c","Title","h1","_c2","Controls","ControlGroup","_c3","Label","label","_c4","Select","select","_c5","Input","input","_c6","Button","button","props","$primary","_c7","GraphContainer","_c8","SVG","svg","_c9","Node","circle","$isStart","$isVisited","$isCurrent","$isInMST","_c0","Edge","line","$isExploring","_c1","EdgeWeight","text","_c10","NodeLabel","_c11","InfoPanel","_c12","InfoCard","_c13","InfoTitle","h3","_c14","InfoValue","_c15","InfoDescription","_c16","InputSection","_c17","InputGrid","_c18","InputGroup","_c19","InputTitle","_c20","TextArea","textarea","_c21","algorithms","dfs","name","description","type","bfs","kruskal","prim","topological","GraphVisualizer","_s","nodes","setNodes","edges","setEdges","algorithm","setAlgorithm","isRunning","setIsRunning","currentNode","setCurrentNode","visitedNodes","setVisitedNodes","Set","exploringEdges","setExploringEdges","mstEdges","setMstEdges","startNode","setStartNode","graphType","setGraphType","nodesInput","setNodesInput","edgesInput","setEdgesInput","stats","setStats","visited","totalWeight","executionTime","parseGraph","nodeNames","split","map","n","trim","filter","newNodes","index","id","x","Math","cos","PI","length","y","sin","edgeStrings","e","newEdges","forEach","edgeStr","parts","from","indexOf","to","weight","parseInt","push","resetVisualization","error","console","generateRandomGraph","nodeCount","Array","_","i","String","fromCharCode","edgeList","j","random","floor","join","sleep","ms","Promise","resolve","setTimeout","startTime","Date","now","stack","visitedCount","currentId","pop","has","add","neighbors","edge","neighbor","reverse","endTime","queue","shift","sortedEdges","sort","a","b","parent","rank","mst","node","find","union","rootX","rootY","size","minEdge","minWeight","Infinity","fromVisited","toVisited","startVisualization","getEdgePosition","fromNode","toNode","x1","y1","x2","y2","midX","midY","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","disabled","onClick","Object","entries","key","algo","pos","cx","cy","r","style","fontSize","_c22","$RefreshReg$"],"sources":["D:/algorithm-visualizer/src/components/GraphVisualizer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n// Animation library removed for lighter build\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  color: white;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ControlGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n  align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  cursor: pointer;\r\n  \r\n  option {\r\n    background: #2a2a3e;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  width: 100px;\r\n  text-align: center;\r\n  \r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.7);\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  font-size: 14px;\r\n  \r\n  ${props => props.$primary ? `\r\n    background: linear-gradient(45deg, #667eea, #764ba2);\r\n    color: white;\r\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n  ` : `\r\n    background: rgba(255, 255, 255, 0.2);\r\n    color: white;\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n  `}\r\n  \r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    transform: none;\r\n  }\r\n`;\r\n\r\nconst GraphContainer = styled.div`\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  min-height: 500px;\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst SVG = styled.svg`\r\n  width: 100%;\r\n  height: 500px;\r\n  background: transparent;\r\n`;\r\n\r\nconst Node = styled.circle`\r\n  cursor: pointer;\r\n  stroke: rgba(255, 255, 255, 0.3);\r\n  stroke-width: 2;\r\n  \r\n  ${props => {\r\n    if (props.$isStart) return 'fill: #4ade80;';\r\n    if (props.$isVisited) return 'fill: #8b5cf6;';\r\n    if (props.$isCurrent) return 'fill: #f59e0b;';\r\n    if (props.$isInMST) return 'fill: #22c55e;';\r\n    return 'fill: #667eea;';\r\n  }}\r\n`;\r\n\r\nconst Edge = styled.line`\r\n  stroke: rgba(255, 255, 255, 0.4);\r\n  stroke-width: 2;\r\n  \r\n  ${props => {\r\n    if (props.$isInMST) return 'stroke: #22c55e; stroke-width: 3;';\r\n    if (props.$isExploring) return 'stroke: #f59e0b; stroke-width: 3;';\r\n    return '';\r\n  }}\r\n`;\r\n\r\nconst EdgeWeight = styled.text`\r\n  fill: white;\r\n  font-size: 12px;\r\n  text-anchor: middle;\r\n  alignment-baseline: middle;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst NodeLabel = styled.text`\r\n  fill: white;\r\n  font-size: 14px;\r\n  text-anchor: middle;\r\n  alignment-baseline: middle;\r\n  font-weight: 600;\r\n  pointer-events: none;\r\n`;\r\n\r\nconst InfoPanel = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 2rem;\r\n`;\r\n\r\nconst InfoCard = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst InfoTitle = styled.h3`\r\n  font-size: 1.2rem;\r\n  margin-bottom: 1rem;\r\n  color: #667eea;\r\n`;\r\n\r\nconst InfoValue = styled.div`\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst InfoDescription = styled.div`\r\n  font-size: 0.9rem;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst InputSection = styled.div`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 15px;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst InputGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nconst InputGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst InputTitle = styled.h3`\r\n  color: #667eea;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  padding: 1rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  font-size: 14px;\r\n  backdrop-filter: blur(10px);\r\n  resize: vertical;\r\n  min-height: 120px;\r\n  font-family: 'Courier New', monospace;\r\n  \r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.7);\r\n  }\r\n`;\r\n\r\nconst algorithms = {\r\n  dfs: {\r\n    name: 'Depth-First Search',\r\n    description: 'Traverses as far as possible before backtracking',\r\n    type: 'traversal'\r\n  },\r\n  bfs: {\r\n    name: 'Breadth-First Search',\r\n    description: 'Visits all neighbors before going to next level',\r\n    type: 'traversal'\r\n  },\r\n  kruskal: {\r\n    name: \"Kruskal's MST\",\r\n    description: 'Finds minimum spanning tree using edge sorting',\r\n    type: 'mst'\r\n  },\r\n  prim: {\r\n    name: \"Prim's MST\",\r\n    description: 'Grows MST by adding minimum weight edges',\r\n    type: 'mst'\r\n  },\r\n  topological: {\r\n    name: 'Topological Sort',\r\n    description: 'Orders vertices in directed acyclic graph',\r\n    type: 'sort'\r\n  }\r\n};\r\n\r\nconst GraphVisualizer = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [algorithm, setAlgorithm] = useState('dfs');\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set());\r\n  const [exploringEdges, setExploringEdges] = useState(new Set());\r\n  const [mstEdges, setMstEdges] = useState(new Set());\r\n  const [startNode, setStartNode] = useState(0);\r\n  const [graphType, setGraphType] = useState('undirected');\r\n  const [nodesInput, setNodesInput] = useState('A,B,C,D,E');\r\n  const [edgesInput, setEdgesInput] = useState('A-B-5,B-C-3,C-D-7,D-E-2,E-A-4,B-D-6');\r\n  const [stats, setStats] = useState({\r\n    visited: 0,\r\n    totalWeight: 0,\r\n    executionTime: 0\r\n  });\r\n\r\n  const parseGraph = useCallback(() => {\r\n    try {\r\n      // Parse nodes\r\n      const nodeNames = nodesInput.split(',').map(n => n.trim()).filter(n => n);\r\n      const newNodes = nodeNames.map((name, index) => ({\r\n        id: index,\r\n        name,\r\n        x: 300 + 200 * Math.cos((2 * Math.PI * index) / nodeNames.length),\r\n        y: 250 + 150 * Math.sin((2 * Math.PI * index) / nodeNames.length)\r\n      }));\r\n\r\n      // Parse edges\r\n      const edgeStrings = edgesInput.split(',').map(e => e.trim()).filter(e => e);\r\n      const newEdges = [];\r\n      \r\n      edgeStrings.forEach(edgeStr => {\r\n        const parts = edgeStr.split('-');\r\n        if (parts.length >= 2) {\r\n          const from = nodeNames.indexOf(parts[0].trim());\r\n          const to = nodeNames.indexOf(parts[1].trim());\r\n          const weight = parts.length > 2 ? parseInt(parts[2]) || 1 : 1;\r\n          \r\n          if (from !== -1 && to !== -1) {\r\n            newEdges.push({\r\n              id: `${from}-${to}`,\r\n              from,\r\n              to,\r\n              weight\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      resetVisualization();\r\n    } catch (error) {\r\n      console.error('Error parsing graph:', error);\r\n    }\r\n  }, [nodesInput, edgesInput]);\r\n\r\n  useEffect(() => {\r\n    parseGraph();\r\n  }, [parseGraph]);\r\n\r\n  const resetVisualization = () => {\r\n    setCurrentNode(null);\r\n    setVisitedNodes(new Set());\r\n    setExploringEdges(new Set());\r\n    setMstEdges(new Set());\r\n    setStats({ visited: 0, totalWeight: 0, executionTime: 0 });\r\n  };\r\n\r\n  const generateRandomGraph = () => {\r\n    const nodeCount = 6;\r\n    const nodeNames = Array.from({ length: nodeCount }, (_, i) => String.fromCharCode(65 + i));\r\n    const edgeList = [];\r\n    \r\n    // Generate random edges\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      for (let j = i + 1; j < nodeCount; j++) {\r\n        if (Math.random() > 0.4) { // 60% chance of edge\r\n          const weight = Math.floor(Math.random() * 10) + 1;\r\n          edgeList.push(`${nodeNames[i]}-${nodeNames[j]}-${weight}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    setNodesInput(nodeNames.join(','));\r\n    setEdgesInput(edgeList.join(','));\r\n  };\r\n\r\n  const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n  const dfs = async () => {\r\n    const startTime = Date.now();\r\n    const visited = new Set();\r\n    const stack = [startNode];\r\n    let visitedCount = 0;\r\n\r\n    while (stack.length > 0) {\r\n      const currentId = stack.pop();\r\n      \r\n      if (visited.has(currentId)) continue;\r\n      \r\n      visited.add(currentId);\r\n      visitedCount++;\r\n      setCurrentNode(currentId);\r\n      setVisitedNodes(new Set(visited));\r\n      \r\n      await sleep(800);\r\n      \r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(edge => edge.from === currentId || edge.to === currentId)\r\n        .map(edge => edge.from === currentId ? edge.to : edge.from)\r\n        .filter(neighbor => !visited.has(neighbor));\r\n      \r\n      // Add neighbors to stack in reverse order for consistent traversal\r\n      neighbors.reverse().forEach(neighbor => {\r\n        if (!visited.has(neighbor)) {\r\n          stack.push(neighbor);\r\n        }\r\n      });\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visitedCount,\r\n      totalWeight: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const bfs = async () => {\r\n    const startTime = Date.now();\r\n    const visited = new Set();\r\n    const queue = [startNode];\r\n    let visitedCount = 0;\r\n\r\n    visited.add(startNode);\r\n    \r\n    while (queue.length > 0) {\r\n      const currentId = queue.shift();\r\n      visitedCount++;\r\n      setCurrentNode(currentId);\r\n      setVisitedNodes(new Set(visited));\r\n      \r\n      await sleep(800);\r\n      \r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(edge => edge.from === currentId || edge.to === currentId)\r\n        .map(edge => edge.from === currentId ? edge.to : edge.from)\r\n        .filter(neighbor => !visited.has(neighbor));\r\n      \r\n      neighbors.forEach(neighbor => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visitedCount,\r\n      totalWeight: 0,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const kruskal = async () => {\r\n    const startTime = Date.now();\r\n    const sortedEdges = [...edges].sort((a, b) => a.weight - b.weight);\r\n    const parent = {};\r\n    const rank = {};\r\n    const mst = new Set();\r\n    let totalWeight = 0;\r\n\r\n    // Initialize union-find\r\n    nodes.forEach(node => {\r\n      parent[node.id] = node.id;\r\n      rank[node.id] = 0;\r\n    });\r\n\r\n    const find = (x) => {\r\n      if (parent[x] !== x) {\r\n        parent[x] = find(parent[x]);\r\n      }\r\n      return parent[x];\r\n    };\r\n\r\n    const union = (x, y) => {\r\n      const rootX = find(x);\r\n      const rootY = find(y);\r\n      \r\n      if (rootX !== rootY) {\r\n        if (rank[rootX] < rank[rootY]) {\r\n          parent[rootX] = rootY;\r\n        } else if (rank[rootX] > rank[rootY]) {\r\n          parent[rootY] = rootX;\r\n        } else {\r\n          parent[rootY] = rootX;\r\n          rank[rootX]++;\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    for (const edge of sortedEdges) {\r\n      setExploringEdges(new Set([edge.id]));\r\n      await sleep(1000);\r\n      \r\n      if (union(edge.from, edge.to)) {\r\n        mst.add(edge.id);\r\n        totalWeight += edge.weight;\r\n        setMstEdges(new Set(mst));\r\n        await sleep(500);\r\n      }\r\n      \r\n      setExploringEdges(new Set());\r\n      \r\n      if (mst.size === nodes.length - 1) break;\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: nodes.length,\r\n      totalWeight,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const prim = async () => {\r\n    const startTime = Date.now();\r\n    const visited = new Set([startNode]);\r\n    const mst = new Set();\r\n    let totalWeight = 0;\r\n\r\n    while (visited.size < nodes.length) {\r\n      let minEdge = null;\r\n      let minWeight = Infinity;\r\n\r\n      // Find minimum weight edge from visited to unvisited nodes\r\n      for (const edge of edges) {\r\n        const fromVisited = visited.has(edge.from);\r\n        const toVisited = visited.has(edge.to);\r\n        \r\n        if (fromVisited !== toVisited && edge.weight < minWeight) {\r\n          minEdge = edge;\r\n          minWeight = edge.weight;\r\n        }\r\n      }\r\n\r\n      if (minEdge) {\r\n        setExploringEdges(new Set([minEdge.id]));\r\n        await sleep(1000);\r\n\r\n        mst.add(minEdge.id);\r\n        totalWeight += minEdge.weight;\r\n        visited.add(minEdge.from);\r\n        visited.add(minEdge.to);\r\n        \r\n        setVisitedNodes(new Set(visited));\r\n        setMstEdges(new Set(mst));\r\n        setExploringEdges(new Set());\r\n        \r\n        await sleep(500);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    const endTime = Date.now();\r\n    setStats({\r\n      visited: visited.size,\r\n      totalWeight,\r\n      executionTime: endTime - startTime\r\n    });\r\n  };\r\n\r\n  const startVisualization = async () => {\r\n    if (isRunning || nodes.length === 0) return;\r\n\r\n    setIsRunning(true);\r\n    resetVisualization();\r\n\r\n    try {\r\n      switch (algorithm) {\r\n        case 'dfs':\r\n          await dfs();\r\n          break;\r\n        case 'bfs':\r\n          await bfs();\r\n          break;\r\n        case 'kruskal':\r\n          await kruskal();\r\n          break;\r\n        case 'prim':\r\n          await prim();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('Visualization interrupted:', error);\r\n    }\r\n\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const getEdgePosition = (edge) => {\r\n    const fromNode = nodes.find(n => n.id === edge.from);\r\n    const toNode = nodes.find(n => n.id === edge.to);\r\n    \r\n    if (!fromNode || !toNode) return null;\r\n    \r\n    return {\r\n      x1: fromNode.x,\r\n      y1: fromNode.y,\r\n      x2: toNode.x,\r\n      y2: toNode.y,\r\n      midX: (fromNode.x + toNode.x) / 2,\r\n      midY: (fromNode.y + toNode.y) / 2\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Graph Algorithms Visualizer</Title>\r\n\r\n      <InputSection>\r\n        <InputGrid>\r\n          <InputGroup>\r\n            <InputTitle>Graph Definition</InputTitle>\r\n            <Label>Nodes (comma-separated)</Label>\r\n            <Input\r\n              value={nodesInput}\r\n              onChange={(e) => setNodesInput(e.target.value)}\r\n              placeholder=\"A,B,C,D,E\"\r\n              disabled={isRunning}\r\n            />\r\n            <Label>Edges (format: A-B-weight)</Label>\r\n            <TextArea\r\n              value={edgesInput}\r\n              onChange={(e) => setEdgesInput(e.target.value)}\r\n              placeholder=\"A-B-5,B-C-3,C-D-7\"\r\n              disabled={isRunning}\r\n            />\r\n            <Button onClick={generateRandomGraph} disabled={isRunning}>\r\n              Generate Random Graph\r\n            </Button>\r\n          </InputGroup>\r\n          \r\n          <InputGroup>\r\n            <InputTitle>Algorithm Settings</InputTitle>\r\n            <ControlGroup>\r\n              <Label>Algorithm</Label>\r\n              <Select\r\n                value={algorithm}\r\n                onChange={(e) => setAlgorithm(e.target.value)}\r\n                disabled={isRunning}\r\n              >\r\n                {Object.entries(algorithms).map(([key, algo]) => (\r\n                  <option key={key} value={key}>{algo.name}</option>\r\n                ))}\r\n              </Select>\r\n            </ControlGroup>\r\n            \r\n            <ControlGroup>\r\n              <Label>Start Node</Label>\r\n              <Select\r\n                value={startNode}\r\n                onChange={(e) => setStartNode(parseInt(e.target.value))}\r\n                disabled={isRunning}\r\n              >\r\n                {nodes.map(node => (\r\n                  <option key={node.id} value={node.id}>{node.name}</option>\r\n                ))}\r\n              </Select>\r\n            </ControlGroup>\r\n            \r\n            <Button $primary onClick={startVisualization} disabled={isRunning || nodes.length === 0}>\r\n              {isRunning ? 'Running...' : 'Start Visualization'}\r\n            </Button>\r\n            \r\n            <Button onClick={resetVisualization} disabled={isRunning}>\r\n              Reset\r\n            </Button>\r\n          </InputGroup>\r\n        </InputGrid>\r\n      </InputSection>\r\n\r\n      <GraphContainer>\r\n        <SVG>\r\n          {/* Render edges */}\r\n          {edges.map(edge => {\r\n            const pos = getEdgePosition(edge);\r\n            if (!pos) return null;\r\n            \r\n            return (\r\n              <g key={edge.id}>\r\n                <Edge\r\n                  x1={pos.x1}\r\n                  y1={pos.y1}\r\n                  x2={pos.x2}\r\n                  y2={pos.y2}\r\n                  $isInMST={mstEdges.has(edge.id)}\r\n                  $isExploring={exploringEdges.has(edge.id)}\r\n\r\n                />\r\n                <EdgeWeight x={pos.midX} y={pos.midY - 5}>\r\n                  {edge.weight}\r\n                </EdgeWeight>\r\n              </g>\r\n            );\r\n          })}\r\n          \r\n          {/* Render nodes */}\r\n          {nodes.map(node => (\r\n            <g key={node.id}>\r\n              <Node\r\n                cx={node.x}\r\n                cy={node.y}\r\n                r={20}\r\n                $isStart={node.id === startNode}\r\n                $isCurrent={currentNode === node.id}\r\n                $isVisited={visitedNodes.has(node.id)}\r\n                $isInMST={algorithms[algorithm].type === 'mst'}\r\n\r\n              />\r\n              <NodeLabel x={node.x} y={node.y}>\r\n                {node.name}\r\n              </NodeLabel>\r\n            </g>\r\n          ))}\r\n        </SVG>\r\n      </GraphContainer>\r\n\r\n      <InfoPanel>\r\n        <InfoCard>\r\n          <InfoTitle>Algorithm</InfoTitle>\r\n          <InfoValue style={{ fontSize: '1.2rem' }}>{algorithms[algorithm].name}</InfoValue>\r\n          <InfoDescription>{algorithms[algorithm].description}</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Nodes Processed</InfoTitle>\r\n          <InfoValue>{stats.visited}</InfoValue>\r\n          <InfoDescription>Vertices visited</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Total Weight</InfoTitle>\r\n          <InfoValue>{stats.totalWeight}</InfoValue>\r\n          <InfoDescription>MST total weight</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Execution Time</InfoTitle>\r\n          <InfoValue>{stats.executionTime}ms</InfoValue>\r\n          <InfoDescription>Algorithm runtime</InfoDescription>\r\n        </InfoCard>\r\n        \r\n        <InfoCard>\r\n          <InfoTitle>Graph Info</InfoTitle>\r\n          <InfoValue>{nodes.length}V, {edges.length}E</InfoValue>\r\n          <InfoDescription>Vertices and edges</InfoDescription>\r\n        </InfoCard>\r\n      </InfoPanel>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GraphVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}